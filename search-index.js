var searchIndex = JSON.parse('{\
"fastcrypto":{"doc":"","t":[3,8,2,0,0,11,11,0,11,11,0,0,11,5,5,0,0,11,11,0,0,11,0,0,11,0,11,11,11,10,11,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,3,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,17,17,3,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,6,3,3,8,8,3,6,18,6,6,6,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,6,6,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,7,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,16,16,8,18,18,18,8,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,10,10,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,11],"n":["SignatureService","Verifier","_","aes","bls12381","borrow","borrow_mut","bulletproofs","clone","clone_into","ed25519","error","from","generate_keypair","generate_production_keypair","hash","hmac","into","new","private_seed","pubkey_bytes","request_signature","secp256k1","serde_helpers","to_owned","traits","try_from","try_into","type_id","verify","vzip","Aes128CbcAnsiX923","Aes128CbcIso10126","Aes128CbcPkcs7","Aes128Ctr","Aes128Gcm","Aes192Ctr","Aes256CbcAnsiX923","Aes256CbcIso10126","Aes256CbcPkcs7","Aes256Ctr","Aes256Gcm","AesCbc","AesCtr","AesGcm","AesKey","GenericByteArray","InitializationVector","as_bytes","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode_base64","decrypt","decrypt","decrypt","decrypt_authenticated","deserialize","drop","encode_base64","encode_hex","encode_hex_upper","encrypt","encrypt","encrypt","encrypt_authenticated","fmt","fmt","from","from","from","from","from_bytes","generate","into","into","into","into","new","new","new","serialize","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zeroize","BLS12381AggregateSignature","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyBytes","BLS12381Signature","BLS_PRIVATE_KEY_LENGTH","BLS_PUBLIC_KEY_LENGTH","BLS_SIGNATURE_LENGTH","DST","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","clear","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","initialize","initialize","initialize","initialize","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_batch_empty_fail","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","BulletproofsRangeProof","PedersenCommitment","add","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","decode_base64","decode_base64","deserialize","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","eq","fmt","fmt","from","from","from_bytes","from_bytes","into","into","new","partial_cmp","prove_bit_length","serialize","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_bit_length","vzip","vzip","0","0","0","ED25519_PRIVATE_KEY_LENGTH","ED25519_PUBLIC_KEY_LENGTH","ED25519_SIGNATURE_LENGTH","Ed25519AggregateSignature","Ed25519KeyPair","Ed25519PrivateKey","Ed25519PublicKey","Ed25519PublicKeyBytes","Ed25519Signature","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","initialize","initialize","initialize","into","into","into","into","into","partial_cmp","private","public","serialize","serialize","serialize","serialize","serialize","sig","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_batch_empty_fail","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","FastCryptoError","GeneralError","InputLengthWrong","InputTooLong","InputTooShort","InvalidInput","borrow","borrow_mut","eq","fmt","fmt","from","into","provide","to_string","try_from","try_into","type_id","vzip","0","0","0","Blake2b256","Blake3","Digest","Hash","HashFunction","HashFunctionWrapper","Keccak256","OUTPUT_SIZE","Sha256","Sha3_256","Sha512","TypedDigest","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone_into","cmp","default","default","deserialize","digest","digest","digest","digest_iterator","encode_hex","encode_hex_upper","eq","finalize","finalize","finalize","fmt","fmt","from","from","from","hash","initialize","initialize","into","into","into","new","new","partial_cmp","serialize","size","to_owned","to_string","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update","vzip","vzip","vzip","HkdfIkm","HmacKey","hkdf","hkdf_generate_from_ikm","hmac","PrivateSeed","as_bytes","as_ref","borrow","borrow_mut","decode_base64","drop","encode_base64","encode_hex","encode_hex_upper","eq","fmt","from","from_bytes","into","try_from","try_into","type_id","vzip","zeroize","PublicKeyBytes","as_ref","borrow","borrow_mut","clear","clone","clone_into","cmp","decode_base64","default","deserialize","encode_base64","encode_hex","encode_hex_upper","eq","fmt","fmt","from","from_bytes","from_str","hash","initialize","into","new","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","RECOVERABLE_SIGNATURE_SIZE","SECP256K1","Secp256k1KeyPair","Secp256k1PrivateKey","Secp256k1PublicKey","Secp256k1PublicKeyBytes","Secp256k1Signature","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","clear","clear","clone","clone","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","initialize","initialize","into","into","into","into","name","partial_cmp","private","privkey","pubkey","public","recover","secret","serialize","serialize","serialize","serialize","sig","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_sign","try_sign","type_id","type_id","type_id","type_id","verify","verify_hashed","vzip","vzip","vzip","vzip","zeroize","zeroize","BlsSignature","Ed25519Signature","borrow","borrow","borrow_mut","borrow_mut","deserialize_as","deserialize_as","from","from","into","into","keypair_decode_base64","serialize_as","serialize_as","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AggregateAuthenticator","AuthenticatedCipher","Authenticator","Cipher","EncodeDecodeBase64","EncryptionKey","FromUniformBytes","Generate","IVType","IVType","KeyPair","LENGTH","LENGTH","LENGTH","Nonce","PrivKey","PrivKey","PrivKey","PrivKey","PubKey","PubKey","PubKey","PubKey","Sig","Sig","Sig","Sig","Signer","SigningKey","ToFromBytes","VerifyingKey","add_aggregate","add_signature","aggregate","as_bytes","batch_verify","decode_base64","decrypt","decrypt_authenticated","encode_base64","encrypt","encrypt_authenticated","from_bytes","generate","generate","generate","private","public","sign","try_sign","verify","verify_batch_empty_fail"],"q":["fastcrypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::aes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::bls12381","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::bulletproofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::ed25519","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::error","","","","","","","","","","","","","","","","","","","fastcrypto::error::FastCryptoError","","","fastcrypto::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::hmac","","","","","fastcrypto::private_seed","","","","","","","","","","","","","","","","","","","","fastcrypto::pubkey_bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256k1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::serde_helpers","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This service holds the node’s private key. It takes …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Use <code>Self</code> to verify that the provided signature for a given …","","AES128 in CBC-mode using ANSI X9.23 padding.","AES128 in CBC-mode using ISO 10126 padding.","AES128 in CBC-mode using PKCS #7 padding.","AES128 in CTR-mode.","AES128 in GCM-mode (authenticated) using the given nonce …","AES192 in CTR-mode.","AES256 in CBC-mode using ANSI X9.23 padding.","AES256 in CBC-mode using ISO 10126 padding.","AES256 in CBC-mode using PKCS #7 padding.","AES256 in CTR-mode.","AES256 in GCM-mode (authenticated) using the given nonce …","Aes in CBC mode","Aes in CTR mode","","A key of <code>N</code> bytes used with AES ciphers.","Struct wrapping an instance of a …","An <code>N</code> byte initialization vector used with AES ciphers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Define Structs","","","","","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bulletproof Range Proofs","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Pedersen commitment from a value, and a …","","Prove that the value is an unsigned integer with bit …","","","","","","","","","","Verifies that commitment is a Pedersen commitment of some …","","","","","","","","","","","","Define Structs","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","BLAKE2-256","BLAKE3","Represents a digest of <code>DIGEST_LEN</code>bytes.","This trait is implemented by all messages that can be …","Trait implemented by hash functions providing a output of …","This wraps a <code>digest::Digest</code> as a …","KECCAK","The length of this hash functions digests in bytes.","SHA-2","SHA-3","SHA-512","The type of the digest when this is hashed.","","","","","","","","","","","","","","","","","Compute the digest of the given data and consume the hash …","","Compute a single digest from all slices in the iterator in …","","","","Retrieve result and consume hash function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new hash function of the given type","Create a new digest containing the given bytes","","","The size of this digest in bytes.","","","Copy the digest into a new vector.","","","","","","","","","","Process the given data, and update the internal of the …","","","","","","","","","Creation of a keypair using the RFC 5869 HKDF …","","Private key/seed of any/fixed size.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A generic construction representing bytes who claim to be …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","This ensures it’s impossible to construct an instance …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Recover public key from signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Trait impl’d by aggregated signatures in asymmetric …","Trait impl’d by symmetric ciphers for authenticated …","Trait impl’d by signatures in asymmetric cryptography.","Trait impl’d by symmetric ciphers.","Cryptographic material with an immediate conversion …","Trait impl’d by encryption keys in symmetric cryptography","Trait impl’d by a keys/secret seeds for generating a …","Trait impl’d by cryptographic material that can be …","","","Trait impl’d by a public / private key pair in …","","","","Trait impl’d by nonces and IV’s used in symmetric …","","","","","","","","","","","","","Sign the provided message bytestring using <code>Self</code> (e.g. a …","Trait impl’d by private (secret) keys in asymmetric …","Trait impl’d by concrete types that represent digital …","Trait impl’d by public keys in asymmetric cryptography.","","","Parse a key from its byte representation","Borrow a byte slice representing the serialized form of …","","","Decrypt <code>ciphertext</code> and write result to <code>buffer</code> using the …","Decrypt <code>ciphertext</code> and write result to <code>buffer</code> using the …","","Encrypt <code>plaintext</code> and write result to <code>buffer</code> using the …","Encrypt <code>plaintext</code> and write result to <code>buffer</code> using the …","Parse a key from its byte representation","","","","","","Sign the given message and return a digital signature","Attempt to sign the given message, returning a digital …","",""],"i":[0,0,0,0,0,3,3,0,3,3,0,0,3,0,0,0,0,3,3,0,0,3,0,0,3,0,3,3,3,70,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,9,14,17,18,9,14,17,18,9,9,9,9,14,17,18,18,9,9,9,9,9,14,17,18,18,9,9,14,17,18,9,9,9,14,17,18,9,14,17,18,9,9,9,14,17,18,9,14,17,18,9,14,17,18,9,14,17,18,9,9,0,0,0,0,0,0,0,0,0,0,23,23,23,25,26,27,23,23,25,26,30,27,23,25,26,30,27,23,25,26,27,23,25,26,27,23,25,27,23,25,27,23,25,25,26,30,27,23,25,26,27,23,25,26,30,27,23,26,30,25,26,30,27,23,25,26,27,23,25,26,27,23,25,27,25,25,26,26,30,27,27,23,23,33,25,25,26,30,30,27,23,25,26,27,27,23,30,30,25,27,25,26,27,23,25,26,30,27,23,25,30,26,25,30,25,26,30,27,23,27,23,25,27,23,25,26,27,23,25,25,26,30,27,23,25,26,30,27,23,26,26,30,30,25,26,30,27,23,25,23,25,25,26,30,27,23,26,30,0,0,35,35,36,35,36,35,36,35,35,35,35,36,35,35,36,35,36,35,36,35,35,36,35,36,35,36,35,36,35,35,36,35,35,35,35,36,35,36,35,36,36,35,36,40,41,39,0,0,0,0,0,0,0,0,0,39,39,39,40,41,42,39,40,41,44,42,39,40,41,44,42,39,42,40,42,39,40,42,39,40,42,39,40,40,41,44,42,40,42,39,40,41,44,42,39,41,44,40,41,44,42,40,41,42,40,41,42,40,42,39,40,40,41,41,44,42,42,39,39,45,40,40,41,44,44,44,42,39,40,41,42,42,44,44,40,40,42,39,40,41,44,42,39,40,44,44,40,41,44,42,39,42,40,42,39,40,41,42,39,40,40,41,44,42,39,40,41,44,42,39,44,44,40,41,44,42,39,40,39,40,40,41,44,42,39,41,44,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,71,72,73,0,0,0,0,0,0,0,74,0,0,0,75,5,5,50,51,5,50,51,50,51,5,5,5,50,51,5,75,74,5,74,5,5,5,74,50,51,5,5,5,50,51,5,50,51,5,50,51,74,5,5,5,5,5,5,5,5,50,51,5,50,51,5,50,51,74,50,51,5,50,51,0,0,0,0,0,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,0,0,0,0,0,63,64,65,63,64,65,66,63,64,65,66,63,64,65,63,65,63,65,63,65,63,63,64,65,66,63,65,63,64,65,66,64,66,63,64,65,66,63,64,65,63,64,65,63,65,63,63,64,64,65,65,66,67,63,63,64,65,66,66,63,64,65,65,66,66,63,65,63,65,63,64,65,66,66,63,66,64,63,66,65,66,63,64,65,66,65,63,65,63,64,65,63,63,64,65,66,63,64,65,66,66,66,63,64,65,66,63,63,63,64,65,66,64,66,0,0,76,77,76,77,76,77,76,77,76,77,0,76,77,76,77,76,77,76,77,76,77,0,0,0,0,0,0,0,0,78,79,0,60,80,2,0,60,2,4,81,80,2,4,81,60,80,4,81,0,0,0,0,81,81,81,82,81,83,78,79,83,78,79,82,4,84,85,4,4,86,86,81,60],"f":[0,0,0,0,0,[[]],[[]],0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],0,0,[[]],[[],4],[[],4],0,0,[[]],[[],[[3,[2]]]],0,0,[[[3,[2]],5],2],0,0,[[]],0,[[],6],[[],6],[[],7],[[],[[6,[8]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9],[[[9,[[11,[10]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[9,[[0,[1,[11,[10]]]]]]],[[9,[[0,[1,[11,[10]]]]]]]],[[]],[12,[[6,[13]]]],[[[14,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[17,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[18,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[18,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[],[[6,[[9,[[11,[10]]]]]]]],[9],[[],19],[[]],[[]],[[[14,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[17,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[18,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[18,[[11,[10]]]]],[[6,[[15,[10]],16]]]],[[[9,[[11,[10]]]],20],21],[[[9,[[11,[10]]]],20],21],[[]],[[]],[[]],[[]],[[],[[6,[9,16]]]],[[],22],[[]],[[]],[[]],[[]],[[[22,[[11,[10]]]]],[[14,[[11,[10]]]]]],[[[22,[[11,[10]]]]],[[17,[[11,[10]]]]]],[[[22,[[11,[10]]]]],[[18,[[11,[10]]]]]],[[[9,[[11,[10]]]]],6],[[]],[[],19],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[[]],[9],0,0,0,0,0,0,0,0,0,0,[[23,23],[[6,[16]]]],[23,[[6,[16]]]],[24,[[6,[23,16]]]],[25],[26],[27],[23],[[[15,[28]]],[[6,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[25,25],[27,27],[23,23],[[]],[[]],[[]],[[25,25],29],[12,[[6,[13]]]],[12,[[6,[13]]]],[12,[[6,[30,13]]]],[12,[[6,[13]]]],[12,[[6,[13]]]],[[],25],[[],26],[[],27],[[],23],[[],[[6,[25]]]],[[],[[6,[26]]]],[[],[[6,[30]]]],[[],[[6,[27]]]],[[],[[6,[23]]]],[26],[30],[[],19],[[],19],[30,19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,25],31],[[27,27],31],[[25,20],[[6,[32]]]],[[25,20],[[6,[32]]]],[[26,20],21],[[26,20],21],[[30,20],21],[[27,20],21],[[27,20],[[6,[32]]]],[[23,20],21],[[23,20],[[6,[32]]]],[25,33],[26,25],[[]],[[]],[26,30],[[]],[[]],[[]],[[],[[6,[25,16]]]],[[],[[6,[26,16]]]],[[],[[6,[27,8]]]],[[],[[6,[16]]]],[[],[[6,[23,16]]]],[12,[[6,[30]]]],[[],30],[25],[27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[25,25],[[34,[29]]]],[30],0,0,[30],[25,6],[26,6],[30,6],[27,6],[23,6],0,0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],6],[33,[[6,[25]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],[[6,[8]]]],[26,[[6,[27,8]]]],[[],[[6,[8]]]],[30,[[6,[27,8]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[25,27],[[6,[8]]]],[23,[[6,[16]]]],[[],[[6,[13]]]],[[]],[[]],[[]],[[]],[[]],[26],[30],0,0,[[35,35],35],[35],[36],[[]],[[]],[[]],[[]],[35,35],[[]],[[35,35],29],[12,[[6,[13]]]],[12,[[6,[13]]]],[[],[[6,[35]]]],[[],19],[[],19],[[]],[[]],[[]],[[]],[[35,35],31],[[35,20],21],[[36,20],21],[[]],[[]],[[],[[6,[35,16]]]],[[],[[6,[36,16]]]],[[]],[[]],[[],35],[[35,35],[[34,[29]]]],[[37,38],[[6,[8]]]],[35,6],[[35,35],35],[[]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[36,35,38],[[6,[8]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[39,39],[[6,[16]]]],[39,[[6,[16]]]],[24,[[6,[39,16]]]],[40],[41],[42],[[[15,[43]]],[[6,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[40,40],[42,42],[39,39],[[]],[[]],[[]],[[40,40],29],[12,[[6,[13]]]],[12,[[6,[13]]]],[12,[[6,[44,13]]]],[12,[[6,[13]]]],[[],40],[[],42],[[],39],[[],[[6,[40]]]],[[],[[6,[41]]]],[[],[[6,[44]]]],[[],[[6,[42]]]],[[],[[6,[39]]]],[41],[44],[[],19],[[],19],[44,19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[40,40],31],[[42,42],31],[[39,39],31],[[40,20],[[6,[32]]]],[[40,20],21],[[41,20],21],[[41,20],21],[[44,20],21],[[42,20],21],[[42,20],[[6,[32]]]],[[39,20],21],[[39,20],[[6,[32]]]],[40,45],[41,40],[[]],[[]],[41,44],[46,44],[[]],[[]],[[]],[[],[[6,[40,16]]]],[[],[[6,[41,16]]]],[[],[[6,[42,8]]]],[[],[[6,[16]]]],[12,[[6,[44]]]],[[],44],[40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[40,40],[[34,[29]]]],[44],[44],[40,6],[41,6],[44,6],[42,6],[39,6],0,[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[45,[[6,[40]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],[[6,[8]]]],[44,[[6,[42,8]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[40,42],[[6,[8]]]],[39,[[6,[16]]]],[[],[[6,[13]]]],[[]],[[]],[[]],[[]],[[]],[41],[44],0,0,0,0,0,0,[[]],[[]],[[16,16],31],[[16,20],21],[[16,20],21],[[]],[[]],[47],[[],19],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],[[5,5],29],[[],[[50,[[0,[48,49]]]]]],[[],51],[[],[[6,[5]]]],[[]],[52,5],0,[28,5],[[]],[[]],[[5,5],31],[[],5],[[[50,[[0,[49,48]]]]],5],[51,5],[[5,20],[[6,[32]]]],[[5,20],[[6,[32]]]],[[]],[[]],[[]],[5],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[5,5],[[34,[29]]]],[5,6],[5,38],[[]],[[],19],[5,[[15,[10]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[52],[[[50,[[0,[49,48]]]],52]],[[51,52]],[[]],[[]],[[]],0,0,[[53,38],[[6,[[15,[10]],16]]]],[[],[[6,[16]]]],[54,5],0,[55],[55],[[]],[[]],[12,[[6,[13]]]],[55],[[],19],[[]],[[]],[[55,55],31],[[55,20],21],[[]],[[],[[6,[55,16]]]],[[]],[[],6],[[],6],[[],7],[[]],[55],0,[56],[[]],[[]],[[]],[[[56,[1]]],[[56,[1]]]],[[]],[[[56,[57]],56],29],[12,[[6,[13]]]],[[],56],[[],[[6,[56]]]],[[],19],[[]],[[]],[[[56,[58]],56],31],[[56,20],[[6,[32]]]],[[[56,[59]],20],21],[[]],[[],[[6,[[56,[60]],16]]]],[12,[[6,[[56,[60]]]]]],[[[56,[61]]]],[[]],[[]],[[],56],[[[56,[62]],56],[[34,[29]]]],[56,6],[[]],[[],19],[[],6],[[],6],[[],7],[[]],0,0,0,0,0,0,0,[63],[64],[65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[63,63],[65,65],[[]],[[]],[[63,63],29],[12,[[6,[13]]]],[12,[[6,[13]]]],[12,[[6,[13]]]],[12,[[6,[66,13]]]],[[],63],[[],65],[[],[[6,[63]]]],[[],[[6,[64]]]],[[],[[6,[65]]]],[[],[[6,[66]]]],[64],[66],[[],19],[[],19],[[],19],[66,19],[[]],[[]],[[]],[[]],[[]],[[]],[[63,63],31],[[65,65],31],[[63,20],21],[[63,20],21],[[64,20],21],[[64,20],21],[[65,20],[[6,[32]]]],[[65,20],21],[[66,20],21],[63,67],[[]],[64,63],[[]],[[]],[64,66],[[]],[[],[[6,[63,16]]]],[[],[[6,[64,16]]]],[[],[[6,[16]]]],[[],[[6,[65,8]]]],[12,[[6,[66]]]],[[],66],[63],[65],[[]],[[]],[[]],[[]],[[]],[[]],0,[[63,63],[[34,[29]]]],[66],0,0,[66],[65,[[6,[63,16]]]],0,[63,6],[64,6],[65,6],[66,6],0,[[]],[[]],[[],19],[[],19],[[],19],[67,[[6,[63]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[66,[[6,[65,8]]]],[[],[[6,[8]]]],[[],7],[[],7],[[],7],[[],7],[[63,65],[[6,[8]]]],[[63,65],[[6,[8]]]],[[]],[[]],[[]],[[]],[64],[66],0,0,[[]],[[]],[[]],[[]],[[],[[6,[68]]]],[[],[[6,[69]]]],[[]],[[]],[[]],[[]],[12,[[6,[4,13]]]],[68,6],[69,6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[6,[16]]]],[[],[[6,[16]]]],[24,[[6,[16]]]],[[]],[[[15,[43]]],[[6,[16]]]],[12,[[6,[13]]]],[[],[[6,[[15,[10]],16]]]],[[],[[6,[[15,[10]],16]]]],[[],19],[[],[[6,[[15,[10]],16]]]],[[],[[6,[[15,[10]],16]]]],[[],[[6,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[8]]]],[[],[[6,[16]]]],[[],[[6,[13]]]]],"p":[[8,"Clone"],[8,"Authenticator"],[3,"SignatureService"],[8,"KeyPair"],[3,"Digest"],[4,"Result"],[3,"TypeId"],[3,"Error"],[3,"GenericByteArray"],[15,"u8"],[8,"ArrayLength"],[15,"str"],[3,"Report"],[3,"AesCtr"],[3,"Vec"],[4,"FastCryptoError"],[3,"AesCbc"],[3,"AesGcm"],[3,"String"],[3,"Formatter"],[6,"Result"],[6,"AesKey"],[3,"BLS12381AggregateSignature"],[8,"IntoIterator"],[3,"BLS12381PublicKey"],[3,"BLS12381PrivateKey"],[3,"BLS12381Signature"],[8,"Iterator"],[4,"Ordering"],[3,"BLS12381KeyPair"],[15,"bool"],[3,"Error"],[6,"BLS12381PublicKeyBytes"],[4,"Option"],[3,"PedersenCommitment"],[3,"BulletproofsRangeProof"],[15,"u64"],[15,"usize"],[3,"Ed25519AggregateSignature"],[3,"Ed25519PublicKey"],[3,"Ed25519PrivateKey"],[3,"Ed25519Signature"],[8,"ExactSizeIterator"],[3,"Ed25519KeyPair"],[6,"Ed25519PublicKeyBytes"],[3,"SigningKey"],[3,"Demand"],[8,"Default"],[8,"Digest"],[3,"HashFunctionWrapper"],[3,"Blake3"],[8,"AsRef"],[6,"HkdfIkm"],[6,"HmacKey"],[3,"PrivateSeed"],[3,"PublicKeyBytes"],[8,"Ord"],[8,"PartialEq"],[8,"Debug"],[8,"VerifyingKey"],[8,"Hash"],[8,"PartialOrd"],[3,"Secp256k1PublicKey"],[3,"Secp256k1PrivateKey"],[3,"Secp256k1Signature"],[3,"Secp256k1KeyPair"],[6,"Secp256k1PublicKeyBytes"],[3,"Signature"],[3,"Signature"],[8,"Verifier"],[13,"InputTooShort"],[13,"InputTooLong"],[13,"InputLengthWrong"],[8,"HashFunction"],[8,"Hash"],[3,"BlsSignature"],[3,"Ed25519Signature"],[8,"Cipher"],[8,"AuthenticatedCipher"],[8,"SigningKey"],[8,"AggregateAuthenticator"],[8,"ToFromBytes"],[8,"EncodeDecodeBase64"],[8,"Generate"],[8,"FromUniformBytes"],[8,"Signer"]]},\
"fastcrypto_derive":{"doc":"","t":[24,24],"n":["SilentDebug","SilentDisplay"],"q":["fastcrypto_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"fastcrypto_proving":{"doc":"","t":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["conversions","bls_fq12_to_blst_fp12","bls_fq2_to_blst_fp2","bls_fq6_to_blst_fp6","bls_fq_to_blst_fp","bls_fr_to_blst_fr","bls_g1_affine_to_blst_g1_affine","bls_g2_affine_to_blst_g2_affine","blst_fp12_to_bls_fq12","blst_fp2_to_bls_fq2","blst_fp6_to_bls_fq6","blst_fp_to_bls_fq","blst_fr_to_bls_fr","blst_g1_affine_to_bls_g1_affine","blst_g2_affine_to_bls_g2_affine"],"q":["fastcrypto_proving","fastcrypto_proving::conversions","","","","","","","","","","","","",""],"d":["","","","","","","Affine point translations: those mostly allow us to …","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,[1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[2,1],[4,3],[6,5],[8,7],[10,9],[12,11],[14,13]],"p":[[6,"Fq12"],[3,"blst_fp12"],[6,"Fq2"],[3,"blst_fp2"],[6,"Fq6"],[3,"blst_fp6"],[6,"Fq"],[3,"blst_fp"],[6,"Fr"],[3,"blst_fr"],[6,"G1Affine"],[3,"blst_p1_affine"],[6,"G2Affine"],[3,"blst_p2_affine"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
