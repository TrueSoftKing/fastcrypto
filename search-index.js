var searchIndex = JSON.parse('{\
"fastcrypto":{"doc":"","t":[3,8,2,0,0,0,11,11,0,11,11,11,11,11,0,0,11,5,5,0,0,11,11,11,0,0,11,0,0,11,0,11,11,11,10,11,6,6,6,6,6,6,6,6,6,6,6,3,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,3,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,3,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,17,17,17,3,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,6,3,3,8,8,3,6,18,8,6,6,6,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,6,6,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,7,3,3,3,6,3,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,8,8,8,8,8,8,8,8,16,16,8,18,18,18,8,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,10,10,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,11,11,10],"n":["SignatureService","Verifier","_","aes","bls12377","bls12381","borrow","borrow_mut","bulletproofs","clone","clone_into","deref","deref_mut","drop","ed25519","error","from","generate_keypair","generate_production_keypair","hash","hmac","init","into","new","private_seed","pubkey_bytes","request_signature","secp256k1","serde_helpers","to_owned","traits","try_from","try_into","type_id","verify","vzip","Aes128CbcAnsiX923","Aes128CbcIso10126","Aes128CbcPkcs7","Aes128Ctr","Aes128Gcm","Aes192Ctr","Aes256CbcAnsiX923","Aes256CbcIso10126","Aes256CbcPkcs7","Aes256Ctr","Aes256Gcm","AesCbc","AesCtr","AesGcm","AesKey","GenericByteArray","InitializationVector","as_bytes","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode_base64","decrypt","decrypt","decrypt","decrypt_authenticated","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","encode_base64","encode_hex","encode_hex_upper","encrypt","encrypt","encrypt","encrypt_authenticated","fmt","fmt","from","from","from","from","from_bytes","generate","init","init","init","init","into","into","into","into","new","new","new","serialize","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zeroize","BLS12377AggregateSignature","BLS12377KeyPair","BLS12377PrivateKey","BLS12377PublicKey","BLS12377PublicKeyBytes","BLS12377Signature","CELO_BLS_PRIVATE_KEY_LENGTH","CELO_BLS_PUBLIC_KEY_LENGTH","CELO_BLS_SIGNATURE_LENGTH","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","get_hash","hash","init","init","init","init","init","initialize","initialize","initialize","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_batch_empty_fail","verify_different_msg","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","BLS12381AggregateSignature","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyBytes","BLS12381Signature","BLS_PRIVATE_KEY_LENGTH","BLS_PUBLIC_KEY_LENGTH","BLS_SIGNATURE_LENGTH","DST","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","clear","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","get_hash","get_hash","hash","hash","init","init","init","init","init","initialize","initialize","initialize","initialize","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_batch_empty_fail","verify_batch_empty_fail_different_msg","verify_different_msg","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","BulletproofsRangeProof","PedersenCommitment","add","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","decode_base64","decode_base64","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","eq","fmt","fmt","from","from","from_bytes","from_bytes","init","init","into","into","new","partial_cmp","prove_bit_length","serialize","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_bit_length","vzip","vzip","0","0","0","ED25519_PRIVATE_KEY_LENGTH","ED25519_PUBLIC_KEY_LENGTH","ED25519_SIGNATURE_LENGTH","Ed25519AggregateSignature","Ed25519KeyPair","Ed25519PrivateKey","Ed25519PublicKey","Ed25519PublicKeyBytes","Ed25519Signature","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","get_hash","hash","init","init","init","init","init","initialize","initialize","initialize","into","into","into","into","into","partial_cmp","private","public","serialize","serialize","serialize","serialize","serialize","sig","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_sign","try_sign","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_batch_empty_fail","verify_batch_empty_fail_different_msg","verify_different_msg","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","FastCryptoError","GeneralError","InputLengthWrong","InputTooLong","InputTooShort","InvalidInput","borrow","borrow_mut","deref","deref_mut","drop","eq","fmt","fmt","from","init","into","provide","to_string","try_from","try_into","type_id","vzip","0","0","0","Blake2b256","Blake3","Digest","Hash","HashFunction","HashFunctionWrapper","Keccak256","OUTPUT_SIZE","ReverseWrapper","Sha256","Sha3_256","Sha512","TypedDigest","Variant","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone_into","cmp","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","digest","digest","digest","digest_iterator","drop","drop","drop","encode_hex","encode_hex_upper","eq","finalize","finalize","finalize","fmt","fmt","from","from","from","get_hash","hash","init","init","init","initialize","initialize","into","into","into","new","new","partial_cmp","serialize","size","to_owned","to_string","to_vec","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update","vzip","vzip","vzip","HkdfIkm","HmacKey","hkdf_generate_from_ikm","hkdf_sha3_256","hmac_sha3_256","PrivateSeed","as_bytes","as_ref","borrow","borrow_mut","decode_base64","deref","deref_mut","drop","drop","encode_base64","encode_hex","encode_hex_upper","eq","fmt","from","from_bytes","init","into","try_from","try_into","type_id","vzip","zeroize","PublicKeyBytes","as_ref","borrow","borrow_mut","clear","clone","clone_into","cmp","decode_base64","default","deref","deref_mut","deserialize","drop","encode_base64","encode_hex","encode_hex_upper","eq","fmt","fmt","from","from_bytes","from_str","get_hash","hash","init","initialize","into","new","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","RECOVERABLE_SIGNATURE_SIZE","SECP256K1","Secp256k1KeyPair","Secp256k1PrivateKey","Secp256k1PublicKey","Secp256k1PublicKeyBytes","Secp256k1Signature","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","clear","clear","clone","clone","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","get_hash","get_hash","hash","hash","init","init","init","init","initialize","initialize","into","into","into","into","name","partial_cmp","private","privkey","pubkey","public","recover","secret","serialize","serialize","serialize","serialize","sig","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_sign","try_sign","type_id","type_id","type_id","type_id","verify","verify_hashed","vzip","vzip","vzip","vzip","zeroize","zeroize","BlsSignature","Ed25519Signature","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize_as","deserialize_as","drop","drop","from","from","init","init","into","into","keypair_decode_base64","serialize_as","serialize_as","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","AggregateAuthenticator","AuthenticatedCipher","Authenticator","Cipher","EncodeDecodeBase64","EncryptionKey","FromUniformBytes","Generate","IVType","IVType","KeyPair","LENGTH","LENGTH","LENGTH","Nonce","PrivKey","PrivKey","PrivKey","PrivKey","PubKey","PubKey","PubKey","PubKey","Sig","Sig","Sig","Sig","Signer","SigningKey","ToFromBytes","VerifyingKey","add_aggregate","add_signature","aggregate","as_bytes","batch_verify","decode_base64","decrypt","decrypt_authenticated","encode_base64","encrypt","encrypt_authenticated","from_bytes","generate","generate","generate","private","public","sign","try_sign","verify","verify_batch_empty_fail","verify_batch_empty_fail_different_msg","verify_different_msg"],"q":["fastcrypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::aes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::blsfastcrypto::blsfastcrypto::bulletproofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::edfastcrypto::error","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::error::FastCryptoError","","","fastcrypto::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::hmac","","","","","fastcrypto::private_seed","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::pubkey_bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256k1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::serde_helpers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This service holds the node’s private key. It takes …","Verify the provided message bytestring using <code>Self</code> (e.g. a …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Use <code>Self</code> to verify that the provided signature for a given …","","AES128 in CBC-mode using ANSI X9.23 padding.","AES128 in CBC-mode using ISO 10126 padding.","AES128 in CBC-mode using PKCS #7 padding.","AES128 in CTR-mode.","AES128 in GCM-mode (authenticated) using the given nonce …","AES192 in CTR-mode.","AES256 in CBC-mode using ANSI X9.23 padding.","AES256 in CBC-mode using ISO 10126 padding.","AES256 in CBC-mode using PKCS #7 padding.","AES256 in CTR-mode.","AES256 in GCM-mode (authenticated) using the given nonce …","Aes in CBC mode","Aes in CTR mode","","A key of <code>N</code> bytes used with AES ciphers.","Struct wrapping an instance of a …","An <code>N</code> byte initialization vector used with AES ciphers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Define Structs","","","","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Define Structs","","","","","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bulletproof Range Proofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Pedersen commitment from a value, and a …","","Prove that the value is an unsigned integer with bit …","","","","","","","","","","Verifies that commitment is a Pedersen commitment of some …","","","","","","","","","","","","Define Structs","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","BLAKE2-256","BLAKE3","Represents a digest of <code>DIGEST_LEN</code>bytes.","This trait is implemented by all messages that can be …","Trait implemented by hash functions providing a output of …","This wraps a <code>digest::Digest</code> as a …","KECCAK","The length of this hash functions digests in bytes.","This allows us to use the hash functions defined here and …","SHA-2","SHA-3","SHA-512","The type of the digest when this is hashed.","","","","","","","","","","","","","","","","","","","","","","","","Compute the digest of the given data and consume the hash …","","Compute a single digest from all slices in the iterator in …","","","","","","","Retrieve result and consume hash function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new hash function of the given type","Create a new digest containing the given bytes","","","The size of this digest in bytes.","","","Copy the digest into a new vector.","","","","","","","","","","Process the given data, and update the internal of the …","","","","","","","","Creation of a keypair using the RFC 5869 HKDF …","","","Private key/seed of any/fixed size.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","A generic construction representing bytes who claim to be …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","This ensures it’s impossible to construct an instance …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Recover public key from signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Trait impl’d by aggregated signatures in asymmetric …","Trait impl’d by symmetric ciphers for authenticated …","Trait impl’d by signatures in asymmetric cryptography.","Trait impl’d by symmetric ciphers.","Cryptographic material with an immediate conversion …","Trait impl’d by encryption keys in symmetric cryptography","Trait impl’d by a keys/secret seeds for generating a …","Trait impl’d by cryptographic material that can be …","","","Trait impl’d by a public / private key pair in …","","","","Trait impl’d by nonces and IV’s used in symmetric …","","","","","","","","","","","","","Sign the provided message bytestring using <code>Self</code> (e.g. a …","Trait impl’d by private (secret) keys in asymmetric …","Trait impl’d by concrete types that represent digital …","Trait impl’d by public keys in asymmetric cryptography.","","","Combine signatures into a single aggregated signature.","Borrow a byte slice representing the serialized form of …","","","Decrypt <code>ciphertext</code> and write result to <code>buffer</code> using the …","Decrypt <code>ciphertext</code> and write result to <code>buffer</code> using the …","","Encrypt <code>plaintext</code> and write result to <code>buffer</code> using the …","Encrypt <code>plaintext</code> and write result to <code>buffer</code> using the …","Parse a key from its byte representation","","","","","","Sign the given message and return a digital signature","Attempt to sign the given message, returning a digital …","","","",""],"i":[0,0,0,0,0,0,3,3,0,3,3,3,3,3,0,0,3,0,0,0,0,3,3,3,0,0,3,0,0,3,0,3,3,3,76,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,10,15,18,19,10,15,18,19,10,10,10,10,15,18,19,19,15,18,19,10,15,18,19,10,10,15,18,19,10,10,10,10,10,15,18,19,19,10,10,15,18,19,10,10,10,15,18,19,10,15,18,19,10,15,18,19,10,10,10,15,18,19,10,15,18,19,10,15,18,19,10,15,18,19,10,10,0,0,0,0,0,0,0,0,0,24,24,24,26,27,28,24,24,26,27,31,28,24,26,27,31,28,24,26,27,28,24,26,28,24,26,28,24,26,28,24,26,26,27,31,28,26,28,24,26,27,31,28,24,26,27,31,28,24,26,27,31,28,24,26,27,27,31,31,28,24,26,27,31,28,26,27,28,24,26,27,28,24,26,28,26,26,27,31,28,28,24,24,34,26,26,27,31,31,28,24,26,27,28,28,31,31,26,26,26,27,31,28,24,26,28,24,26,27,31,28,24,26,31,27,26,31,26,27,31,28,24,28,24,26,28,24,26,28,24,26,26,27,31,28,24,26,27,31,28,24,27,27,31,31,26,27,31,28,24,26,24,26,24,26,27,31,28,24,27,31,0,0,0,0,0,0,0,0,0,0,37,37,37,38,39,40,37,37,38,39,41,40,37,38,39,41,40,37,38,39,40,37,38,39,40,37,38,40,37,38,40,37,38,38,39,41,40,37,38,39,40,37,38,39,41,40,37,38,39,41,40,37,38,39,41,40,37,38,39,39,41,41,40,37,38,39,41,40,37,38,39,40,37,38,39,40,37,38,40,38,38,39,39,41,40,40,37,37,42,38,38,39,41,41,40,37,38,39,40,40,37,41,41,38,40,38,40,38,39,41,40,37,38,39,40,37,38,39,41,40,37,38,41,39,38,41,38,39,41,40,37,40,37,38,40,37,38,39,40,37,38,38,39,41,40,37,38,39,41,40,37,39,39,41,41,38,39,41,40,37,38,37,38,38,37,38,39,41,40,37,39,41,0,0,43,43,44,43,44,43,44,43,43,43,43,44,43,44,43,44,43,43,44,43,44,43,44,43,44,43,43,44,43,44,43,44,43,44,43,44,43,43,44,43,43,43,43,44,43,44,43,44,44,43,44,46,47,45,0,0,0,0,0,0,0,0,0,45,45,45,46,47,48,45,46,47,50,48,45,46,47,50,48,45,48,46,48,45,46,48,45,46,48,45,46,46,47,50,48,46,48,45,46,47,50,48,45,46,47,50,48,45,46,47,50,48,45,46,47,47,50,50,48,45,46,47,50,48,46,47,48,46,47,48,46,48,45,46,46,47,47,50,48,48,45,45,51,46,46,47,50,50,50,48,45,46,47,48,48,50,50,46,46,46,47,50,48,45,46,48,45,46,47,50,48,45,46,50,50,46,47,50,48,45,48,46,48,45,46,47,48,45,46,46,47,50,48,45,46,47,50,48,45,50,50,46,47,50,48,45,46,45,46,46,45,46,47,50,48,45,47,50,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,77,78,79,0,0,0,0,0,0,0,80,0,0,0,0,81,82,6,6,56,57,6,56,57,56,57,6,6,6,56,57,6,56,57,6,56,57,6,81,80,6,80,6,56,57,6,6,6,80,56,57,6,6,6,56,57,6,6,6,56,57,56,57,6,56,57,80,6,6,6,6,6,6,6,6,56,57,6,56,57,6,56,57,80,56,57,6,56,57,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,0,0,0,0,0,69,70,71,69,70,71,72,69,70,71,72,69,70,71,69,71,69,71,69,71,69,69,70,71,72,69,71,69,70,71,72,69,70,71,72,69,70,71,72,69,70,70,71,72,72,69,70,71,72,69,70,71,69,70,71,69,71,69,69,70,70,71,71,72,73,69,69,70,71,72,72,69,70,71,71,72,72,69,71,69,71,69,70,71,72,69,71,69,70,71,72,72,69,72,70,69,72,71,72,69,70,71,72,71,69,71,69,70,71,69,69,70,71,72,69,70,71,72,72,72,69,70,71,72,69,69,69,70,71,72,70,72,0,0,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,83,84,0,83,84,83,84,83,84,83,84,83,84,0,0,0,0,0,0,0,0,85,86,0,66,87,2,0,66,2,5,88,87,2,5,88,66,87,5,88,0,0,0,0,88,88,88,89,88,90,85,86,90,85,86,89,5,91,92,5,5,93,93,88,66,66,88],"f":[0,0,0,0,0,0,[[]],[[]],0,[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[4],[4],[4],0,0,[[]],[[],5],[[],5],0,0,[[],4],[[]],[[],[[3,[2]]]],0,0,[[[3,[2]],6],2],0,0,[[]],0,[[],7],[[],7],[[],8],[[],[[7,[9]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[10],[[[10,[[12,[11]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[[0,[1,[12,[11]]]]]]],[[10,[[0,[1,[12,[11]]]]]]]],[[]],[13,[[7,[14]]]],[[[15,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[18,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[19,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[19,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[7,[[10,[[12,[11]]]]]]]],[4],[4],[4],[4],[10],[[],20],[[]],[[]],[[[15,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[18,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[19,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[19,[[12,[11]]]]],[[7,[[16,[11]],17]]]],[[[10,[[12,[11]]]],21],22],[[[10,[[12,[11]]]],21],22],[[]],[[]],[[]],[[]],[[],[[7,[10,17]]]],[[],23],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[23,[[12,[11]]]]],[[15,[[12,[11]]]]]],[[[23,[[12,[11]]]]],[[18,[[12,[11]]]]]],[[[23,[[12,[11]]]]],[[19,[[12,[11]]]]]],[[[10,[[12,[11]]]]],7],[[]],[[],20],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[10],0,0,0,0,0,0,0,0,0,[[24,24],[[7,[17]]]],[24,[[7,[17]]]],[25,[[7,[24,17]]]],[26],[27],[28],[24],[[[16,[29]]],[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[26,26],[28,28],[24,24],[[]],[[]],[[]],[[26,26],30],[13,[[7,[14]]]],[13,[[7,[14]]]],[13,[[7,[31,14]]]],[13,[[7,[14]]]],[[],26],[[],28],[[],24],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[7,[26]]]],[[],[[7,[27]]]],[[],[[7,[31]]]],[[],[[7,[28]]]],[[],[[7,[24]]]],[4],[27],[4],[31],[4],[4],[4],[[],20],[[],20],[31,20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],32],[[28,28],32],[[26,21],[[7,[33]]]],[[26,21],22],[[27,21],22],[[31,21],22],[[28,21],22],[[28,21],[[7,[33]]]],[[24,21],22],[[24,21],[[7,[33]]]],[26,34],[[]],[27,26],[[]],[[]],[27,31],[[]],[[]],[[],[[7,[26,17]]]],[[],[[7,[27,17]]]],[[],[[7,[28,9]]]],[[],[[7,[17]]]],[13,[[7,[31]]]],[[],31],[[],35],[26],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],[[36,[30]]]],[31],0,0,[31],[26,7],[27,7],[31,7],[28,7],[24,7],0,0,[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],7],[34,[[7,[26]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[27,[[7,[28,9]]]],[[],[[7,[9]]]],[[],[[7,[9]]]],[31,[[7,[28,9]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[26,28],[[7,[9]]]],[24,[[7,[17]]]],[[],[[7,[14]]]],[24,[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[27],[31],0,0,0,0,0,0,0,0,0,0,[[37,37],[[7,[17]]]],[37,[[7,[17]]]],[25,[[7,[37,17]]]],[38],[39],[40],[37],[[[16,[29]]],[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[38,38],[40,40],[37,37],[[]],[[]],[[]],[[38,38],30],[13,[[7,[14]]]],[13,[[7,[14]]]],[13,[[7,[41,14]]]],[13,[[7,[14]]]],[13,[[7,[14]]]],[[],38],[[],39],[[],40],[[],37],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[7,[38]]]],[[],[[7,[39]]]],[[],[[7,[41]]]],[[],[[7,[40]]]],[[],[[7,[37]]]],[4],[39],[4],[4],[41],[4],[4],[[],20],[[],20],[41,20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,38],32],[[40,40],32],[[38,21],[[7,[33]]]],[[38,21],[[7,[33]]]],[[39,21],22],[[39,21],22],[[41,21],22],[[40,21],[[7,[33]]]],[[40,21],22],[[37,21],[[7,[33]]]],[[37,21],22],[38,42],[[]],[39,38],[[]],[[]],[39,41],[[]],[[]],[[],[[7,[38,17]]]],[[],[[7,[39,17]]]],[[],[[7,[40,9]]]],[[],[[7,[17]]]],[[],[[7,[37,17]]]],[13,[[7,[41]]]],[[],41],[[],35],[[],35],[38],[40],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[38,38],[[36,[30]]]],[41],0,0,[41],[38,7],[39,7],[41,7],[40,7],[37,7],0,0,[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[42,[[7,[38]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[39,[[7,[40,9]]]],[[],[[7,[9]]]],[41,[[7,[40,9]]]],[[],[[7,[9]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[38,40],[[7,[9]]]],[37,[[7,[17]]]],[[],[[7,[14]]]],[[],[[7,[14]]]],[37,[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[39],[41],0,0,[[43,43],43],[43],[44],[[]],[[]],[[]],[[]],[43,43],[[]],[[43,43],30],[13,[[7,[14]]]],[13,[[7,[14]]]],[4],[4],[4],[4],[[],[[7,[43]]]],[4],[4],[[],20],[[],20],[[]],[[]],[[]],[[]],[[43,43],32],[[43,21],22],[[44,21],22],[[]],[[]],[[],[[7,[43,17]]]],[[],[[7,[44,17]]]],[[],4],[[],4],[[]],[[]],[[],43],[[43,43],[[36,[30]]]],[[35,4],[[7,[9]]]],[43,7],[[43,43],43],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[44,43,4],[[7,[9]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[45,45],[[7,[17]]]],[45,[[7,[17]]]],[25,[[7,[45,17]]]],[46],[47],[48],[[[16,[49]]],[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[46,46],[48,48],[45,45],[[]],[[]],[[]],[[46,46],30],[13,[[7,[14]]]],[13,[[7,[14]]]],[13,[[7,[50,14]]]],[13,[[7,[14]]]],[[],46],[[],48],[[],45],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[7,[46]]]],[[],[[7,[47]]]],[[],[[7,[50]]]],[[],[[7,[48]]]],[[],[[7,[45]]]],[4],[4],[47],[50],[4],[4],[4],[[],20],[[],20],[50,20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[46,46],32],[[48,48],32],[[45,45],32],[[46,21],[[7,[33]]]],[[46,21],22],[[47,21],22],[[47,21],22],[[50,21],22],[[48,21],[[7,[33]]]],[[48,21],22],[[45,21],22],[[45,21],[[7,[33]]]],[46,51],[[]],[47,46],[[]],[[]],[47,50],[52,50],[[]],[[]],[[],[[7,[46,17]]]],[[],[[7,[47,17]]]],[[],[[7,[17]]]],[[],[[7,[48,9]]]],[13,[[7,[50]]]],[[],50],[[],35],[46],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[46,46],[[36,[30]]]],[50],[50],[46,7],[47,7],[50,7],[48,7],[45,7],0,[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[51,[[7,[46]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],[[7,[9]]]],[50,[[7,[48,9]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[46,48],[[7,[9]]]],[45,[[7,[17]]]],[[],[[7,[14]]]],[[],[[7,[14]]]],[45,[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[47],[50],0,0,0,0,0,0,[[]],[[]],[4],[4],[4],[[17,17],32],[[17,21],22],[[17,21],22],[[]],[[],4],[[]],[53],[[],20],[[],7],[[],7],[[],8],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[[]],[[6,6],30],[[],[[56,[[0,[54,55]]]]]],[[],57],[4],[4],[4],[4],[4],[4],[[],[[7,[6]]]],[[]],[58,6],0,[29,6],[4],[4],[4],[[]],[[]],[[6,6],32],[[],6],[[[56,[[0,[55,54]]]]],6],[57,6],[[6,21],[[7,[33]]]],[[6,21],[[7,[33]]]],[[]],[[]],[[]],[[],35],[6],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[6,6],[[36,[30]]]],[6,7],[6,4],[[]],[[],20],[6,[[16,[11]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[58],[[[56,[[0,[55,54]]]],58]],[[57,58]],[[]],[[]],[[]],0,0,[[],[[7,[17]]]],[[59,4],[[7,[[16,[11]],17]]]],[60,6],0,[61],[61],[[]],[[]],[13,[[7,[14]]]],[4],[4],[61],[4],[[],20],[[]],[[]],[[61,61],32],[[61,21],22],[[]],[[],[[7,[61,17]]]],[[],4],[[]],[[],7],[[],7],[[],8],[[]],[61],0,[62],[[]],[[]],[[]],[[[62,[1]]],[[62,[1]]]],[[]],[[[62,[63]],62],30],[13,[[7,[14]]]],[[],62],[4],[4],[[],[[7,[62]]]],[4],[[],20],[[]],[[]],[[[62,[64]],62],32],[[[62,[65]],21],22],[[62,21],[[7,[33]]]],[[]],[[],[[7,[[62,[66]],17]]]],[13,[[7,[[62,[66]]]]]],[[],35],[[[62,[67]]]],[[],4],[[]],[[]],[[],62],[[[62,[68]],62],[[36,[30]]]],[62,7],[[]],[[],20],[[],7],[[],7],[[],8],[[]],0,0,0,0,0,0,0,[69],[70],[71],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[69,69],[71,71],[[]],[[]],[[69,69],30],[13,[[7,[14]]]],[13,[[7,[14]]]],[13,[[7,[14]]]],[13,[[7,[72,14]]]],[[],69],[[],71],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[7,[69]]]],[[],[[7,[70]]]],[[],[[7,[71]]]],[[],[[7,[72]]]],[4],[70],[4],[4],[4],[72],[[],20],[[],20],[[],20],[72,20],[[]],[[]],[[]],[[]],[[]],[[]],[[69,69],32],[[71,71],32],[[69,21],22],[[69,21],22],[[70,21],22],[[70,21],22],[[71,21],[[7,[33]]]],[[71,21],22],[[72,21],22],[69,73],[[]],[70,69],[[]],[[]],[70,72],[[]],[[],[[7,[69,17]]]],[[],[[7,[70,17]]]],[[],[[7,[71,9]]]],[[],[[7,[17]]]],[13,[[7,[72]]]],[[],72],[[],35],[[],35],[69],[71],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],0,[[69,69],[[36,[30]]]],[72],0,0,[72],[71,[[7,[69,17]]]],0,[69,7],[70,7],[71,7],[72,7],0,[[]],[[]],[[],20],[[],20],[[],20],[73,[[7,[69]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],[[7,[9]]]],[72,[[7,[71,9]]]],[[],8],[[],8],[[],8],[[],8],[[69,71],[[7,[9]]]],[[69,71],[[7,[9]]]],[[]],[[]],[[]],[[]],[70],[72],0,0,[[]],[[]],[[]],[[]],[4],[4],[4],[4],[[],[[7,[74]]]],[[],[[7,[75]]]],[4],[4],[[]],[[]],[[],4],[[],4],[[]],[[]],[13,[[7,[5,14]]]],[74,7],[75,7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[7,[17]]]],[[],[[7,[17]]]],[25,[[7,[17]]]],[[]],[[[16,[49]]],[[7,[17]]]],[13,[[7,[14]]]],[[],[[7,[[16,[11]],17]]]],[[],[[7,[[16,[11]],17]]]],[[],20],[[],[[7,[[16,[11]],17]]]],[[],[[7,[[16,[11]],17]]]],[[],[[7,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[7,[9]]]],[[],[[7,[17]]]],[[],[[7,[14]]]],[[],[[7,[14]]]],[[],[[7,[17]]]]],"p":[[8,"Clone"],[8,"Authenticator"],[3,"SignatureService"],[15,"usize"],[8,"KeyPair"],[3,"Digest"],[4,"Result"],[3,"TypeId"],[3,"Error"],[3,"GenericByteArray"],[15,"u8"],[8,"ArrayLength"],[15,"str"],[3,"Report"],[3,"AesCtr"],[3,"Vec"],[4,"FastCryptoError"],[3,"AesCbc"],[3,"AesGcm"],[3,"String"],[3,"Formatter"],[6,"Result"],[6,"AesKey"],[3,"BLS12377AggregateSignature"],[8,"IntoIterator"],[3,"BLS12377PublicKey"],[3,"BLS12377PrivateKey"],[3,"BLS12377Signature"],[8,"Iterator"],[4,"Ordering"],[3,"BLS12377KeyPair"],[15,"bool"],[3,"Error"],[6,"BLS12377PublicKeyBytes"],[15,"u64"],[4,"Option"],[3,"BLS12381AggregateSignature"],[3,"BLS12381PublicKey"],[3,"BLS12381PrivateKey"],[3,"BLS12381Signature"],[3,"BLS12381KeyPair"],[6,"BLS12381PublicKeyBytes"],[3,"PedersenCommitment"],[3,"BulletproofsRangeProof"],[3,"Ed25519AggregateSignature"],[3,"Ed25519PublicKey"],[3,"Ed25519PrivateKey"],[3,"Ed25519Signature"],[8,"ExactSizeIterator"],[3,"Ed25519KeyPair"],[6,"Ed25519PublicKeyBytes"],[3,"SigningKey"],[3,"Demand"],[8,"Default"],[8,"Digest"],[3,"HashFunctionWrapper"],[3,"Blake3"],[8,"AsRef"],[6,"HkdfIkm"],[6,"HmacKey"],[3,"PrivateSeed"],[3,"PublicKeyBytes"],[8,"Ord"],[8,"PartialEq"],[8,"Debug"],[8,"VerifyingKey"],[8,"Hash"],[8,"PartialOrd"],[3,"Secp256k1PublicKey"],[3,"Secp256k1PrivateKey"],[3,"Secp256k1Signature"],[3,"Secp256k1KeyPair"],[6,"Secp256k1PublicKeyBytes"],[3,"Signature"],[3,"Signature"],[8,"Verifier"],[13,"InputTooShort"],[13,"InputTooLong"],[13,"InputLengthWrong"],[8,"HashFunction"],[8,"Hash"],[8,"ReverseWrapper"],[3,"BlsSignature"],[3,"Ed25519Signature"],[8,"Cipher"],[8,"AuthenticatedCipher"],[8,"SigningKey"],[8,"AggregateAuthenticator"],[8,"ToFromBytes"],[8,"EncodeDecodeBase64"],[8,"Generate"],[8,"FromUniformBytes"],[8,"Signer"]]},\
"fastcrypto_derive":{"doc":"","t":[24,24],"n":["SilentDebug","SilentDisplay"],"q":["fastcrypto_derive",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"fastcrypto_proving":{"doc":"","t":[0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,3,3,3,12,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11],"n":["conversions","dummy_circuit","verifier","bls_fq12_to_blst_fp12","bls_fq2_to_blst_fp2","bls_fq6_to_blst_fp6","bls_fq_to_blst_fp","bls_fr_to_blst_fr","bls_g1_affine_from_zcash_bytes","bls_g1_affine_to_blst_g1_affine","bls_g1_affine_to_zcash_bytes","bls_g2_affine_from_zcash_bytes","bls_g2_affine_to_blst_g2_affine","bls_g2_affine_to_zcash_bytes","blst_fp12_to_bls_fq12","blst_fp2_to_bls_fq2","blst_fp6_to_bls_fq6","blst_fp_to_bls_fq","blst_fr_to_bls_fr","blst_g1_affine_to_bls_g1_affine","blst_g2_affine_to_bls_g2_affine","DummyCircuit","a","b","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","from","generate_constraints","init","into","num_constraints","num_variables","to_owned","try_from","try_into","type_id","vzip","PreparedVerifyingKey","Proof","VerifyingKey","a","alpha_g1","alpha_g1_beta_g2","b","beta_g2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone_into","clone_into","clone_into","default","default","delta_g2","delta_g2_neg_pc","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize_unchecked","deserialize_unchecked","deserialize_uncompressed","deserialize_uncompressed","drop","drop","drop","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","gamma_abc_g1","gamma_g2","gamma_g2_neg_pc","init","init","init","into","into","into","log_2_byte","process_vk_special","serialize","serialize","serialize_unchecked","serialize_unchecked","serialize_uncompressed","serialize_uncompressed","serialized_size","serialized_size","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uncompressed_size","uncompressed_size","verify_with_processed_vk","vk_gamma_abc_g1","vzip","vzip","vzip","write","write"],"q":["fastcrypto_proving","","","fastcrypto_proving::conversions","","","","","","","","","","","","","","","","","","fastcrypto_proving::dummy_circuit","","","","","","","","","","","","","","","","","","","","","fastcrypto_proving::verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","This deserializes an Arkworks G1Affine point from a Zcash …","","This serializes an Arkworks G1Affine point into a Zcash …","This deserializes an Arkworks G2Affine point from a Zcash …","","This serializes an Arkworks G2Affine point into a Zcash …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","This is a helper function to store a pre-processed version …","A proof in the Groth16 SNARK.","A verification key in the Groth16 SNARK.","The <code>A</code> element in <code>G1</code>.","The <code>alpha * G</code>, where <code>G</code> is the generator of <code>E::G1</code>.","The element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.","The <code>B</code> element in <code>G2</code>.","The <code>alpha * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.","","","","","","","The <code>C</code> element in <code>G1</code>.","","","","","","","","","The <code>delta * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.","The element <code>- delta * H</code> in <code>E::G2</code>, for use in pairings.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","The <code>gamma^{-1} * (beta * a_i + alpha * b_i + c_i) * H</code>, …","The <code>gamma * H</code>, where <code>H</code> is the generator of <code>E::G2</code>.","The element <code>- gamma * H</code> in <code>E::G2</code>, for use in pairings.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the log base 2 of b in O(lg(N)) time.","Takes an input Verifier key <code>vk</code> and returns a …","","","","","","","","","","","","","","","","","","","","","","","Returns the validity of the Groth16 proof passed as …","The element vk.gamma_abc_g1, aka the …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,25,26,24,25,26,24,25,26,24,25,26,25,24,25,26,24,25,26,25,26,26,24,24,25,26,24,25,26,25,26,25,26,25,26,24,25,26,24,25,26,24,25,26,24,25,26,26,26,26,24,24,25,26,24,25,26,0,0,25,26,25,26,25,26,25,26,24,25,26,24,25,26,24,25,26,24,25,26,25,26,0,24,24,25,26,25,26],"f":[0,0,0,[1,2],[3,4],[5,6],[7,8],[9,10],[[],[[12,[11]]]],[11,13],[11],[[],[[12,[14]]]],[14,15],[14],[2,1],[4,3],[6,5],[8,7],[10,9],[13,11],[15,14],0,0,0,[[]],[[]],[[[18,[[0,[16,17]]]]],[[18,[[0,[16,17]]]]]],[[]],[19],[19],[19],[[]],[[[18,[17]],[20,[17]]],[[22,[21]]]],[[],19],[[]],0,0,[[]],[[],22],[[],22],[[],23],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[24,24],[25,25],[26,26],[[]],[[]],[[]],[[],25],[[],26],0,0,[19],[19],[19],[19],[19],[19],[[],[[22,[25,27]]]],[[],[[22,[26,27]]]],[[],[[22,[25,27]]]],[[],[[22,[26,27]]]],[[],[[22,[25,27]]]],[[],[[22,[26,27]]]],[19],[19],[19],[[24,24],28],[[25,25],28],[[26,26],28],[[24,29],30],[[25,29],[[22,[31]]]],[[26,29],[[22,[31]]]],[[]],[[]],[32,26],[[]],0,0,0,[[],19],[[],19],[[],19],[[]],[[]],[[]],[33,19],[26,24],[25,[[22,[27]]]],[26,[[22,[27]]]],[25,[[22,[27]]]],[26,[[22,[27]]]],[25,[[22,[27]]]],[26,[[22,[27]]]],[25,19],[26,19],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[25,19],[26,19],[[24,25],[[22,[28,21]]]],0,[[]],[[]],[[]],[25,[[22,[34]]]],[26,[[22,[34]]]]],"p":[[6,"Fq12"],[3,"blst_fp12"],[6,"Fq2"],[3,"blst_fp2"],[6,"Fq6"],[3,"blst_fp6"],[6,"Fq"],[3,"blst_fp"],[6,"Fr"],[3,"blst_fr"],[6,"G1Affine"],[4,"Option"],[3,"blst_p1_affine"],[6,"G2Affine"],[3,"blst_p2_affine"],[8,"Clone"],[8,"PrimeField"],[3,"DummyCircuit"],[15,"usize"],[4,"ConstraintSystemRef"],[4,"SynthesisError"],[4,"Result"],[3,"TypeId"],[3,"PreparedVerifyingKey"],[3,"Proof"],[3,"VerifyingKey"],[4,"SerializationError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"PreparedVerifyingKey"],[15,"u8"],[3,"Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
