var searchIndex = JSON.parse('{\
"ecvrf_cli":{"doc":"","t":"ENNDNDLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLMMLLLFMMMMLLLLLLLLLLLLLLLLLLLL","n":["Command","Keygen","Prove","ProveArguments","Verify","VerifyArguments","__clone_box","__clone_box","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","command","command","command","command_for_update","command_for_update","command_for_update","execute","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","has_subcommand","input","input","into","into","into","main","output","proof","public_key","secret_key","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","vzip"],"q":["ecvrf_cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Generate a key pair for proving and verification.","Create an output/hash and a proof.","","Verify an output/hash and a proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","The hex encoded input string.","Hex encoding of the input string used to generate the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Hex-encoded Sha512 hash of the proof. Must be 64 bytes.","Encoding of the proof to verify. Must be 80 bytes.","The public key corresponding to the secret key used to …","A hex encoding of the secret key. Corresponds to a scalar …","","","","","","","","","","","","","","","","","","","",""],"i":[0,5,5,0,5,0,3,4,3,4,3,4,5,5,5,3,4,5,3,4,3,4,3,4,5,3,4,5,3,4,0,5,3,4,5,3,4,5,3,4,3,4,5,3,4,5,3,4,0,4,4,4,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4],"f":[0,0,0,0,0,0,[1],[1],[2,2],[2,2],[2,2],[2,2],[2,2],[2,2],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[5,[[8,[6,7]]]],[[]],[[]],[[]],[9,[[8,[5,10]]]],[9,[[8,[3,10]]]],[9,[[8,[4,10]]]],[9,[[8,[5,10]]]],[9,[[8,[3,10]]]],[9,[[8,[4,10]]]],[[],[[12,[11]]]],[[],[[12,[11]]]],[13,14],0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],15],[[],15],[[],15],[[5,9],[[8,[10]]]],[[3,9],[[8,[10]]]],[[4,9],[[8,[10]]]],[[5,9],[[8,[10]]]],[[3,9],[[8,[10]]]],[[4,9],[[8,[10]]]],[[]],[[]],[[]]],"p":[[3,"Private"],[3,"Command"],[3,"ProveArguments"],[3,"VerifyArguments"],[4,"Command"],[3,"String"],[3,"Error"],[4,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[3,"TypeId"]]},\
"fastcrypto":{"doc":"","t":"CAAAAAAOAAAAAAAOOAAAGGGGGGGGGGGDDDGIIIDQQGILLLLLLLLLLLLLLKLLLKLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRAADGDDDGDRLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGDDDGDRLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRDDDDDGDLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDLLLLLLLLLLLLLLLKLLLFLLLLLLLLLKLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEGNNNNNNNNLLLLLLLLLLLLLLLLLLIIQQIIQAKKKKAKDGRDGRDRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDDDIIDGISIGGGGQQLLLLLLLLLLLLLLLLLLLLLLLLKKLLMLLLLLKLLLLLLLLLLLLLLKLKLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLGGFFDLLLLLLLLLLLLLLLLLLLGHRRRRDDDDGLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMAMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLHRDLLLLMLLLLLLLLLLLLLLLLMLLLLLLLGRRRRDDDDGLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMAMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLRDLLLLMLLLLLLLLLLLLLLLMLMLLLLLLLSDDILLLLLLLLLLLLLLLLLLLLLLKLLLLFLLLKLLLLLLLLLDLLLLLLLLLLLLLLIIIQIIIIISSSQQQQQQQQQQIIQQQQQQIQIIIIKKKLKKKKKKLKKKLKKLKKKKLLQQQQQQIIIIAKLKKKLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLLLL","n":["_","aes","bls12381","bulletproofs","ed25519","encoding","error","generate_bytes_representation","groups","hash","hmac","private_seed","secp256k1","secp256r1","serde_helpers","serialize_deserialize_with_to_from_byte_array","serialize_deserialize_with_to_from_bytes","signature_service","traits","vrf","Aes128CbcAnsiX923","Aes128CbcIso10126","Aes128CbcPkcs7","Aes128Ctr","Aes128Gcm","Aes192Ctr","Aes256CbcAnsiX923","Aes256CbcIso10126","Aes256CbcPkcs7","Aes256Ctr","Aes256Gcm","AesCbc","AesCtr","AesGcm","AesKey","AuthenticatedCipher","Cipher","EncryptionKey","GenericByteArray","IVType","IVType","InitializationVector","Nonce","__clone_box","as_bytes","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode_base64","decrypt","decrypt","decrypt","decrypt","decrypt_authenticated","decrypt_authenticated","deserialize","drop","encode_base64","encode_hex","encode_hex_upper","encrypt","encrypt","encrypt","encrypt","encrypt_authenticated","encrypt_authenticated","fmt","fmt","from","from","from","from","from_bytes","generate","into","into","into","into","new","new","new","serialize","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zeroize","BLS_G1_LENGTH","BLS_G2_LENGTH","BLS_KEYPAIR_LENGTH","BLS_PRIVATE_KEY_LENGTH","min_pk","min_sig","BLS12381AggregateSignature","BLS12381AggregateSignatureAsBytes","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyAsBytes","BLS12381Signature","DST_G2","__clone_box","__clone_box","__clone_box","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","initialize","initialize","insecure_default","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","sign","sign","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","verify","verify","verify_different_msg","vzip","vzip","vzip","vzip","vzip","zeroize","BLS12381AggregateSignature","BLS12381AggregateSignatureAsBytes","BLS12381KeyPair","BLS12381PrivateKey","BLS12381PublicKey","BLS12381PublicKeyAsBytes","BLS12381Signature","DST_G1","__clone_box","__clone_box","__clone_box","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","bytes","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","initialize","initialize","insecure_default","into","into","into","into","into","partial_cmp","private","privkey","pubkey","public","serialize","serialize","serialize","serialize","serialize","sig","sig","sign","sign","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","verify","verify","verify_different_msg","vzip","vzip","vzip","vzip","vzip","zeroize","BulletproofsRangeProof","PedersenCommitment","__clone_box","add","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","decode_base64","decode_base64","deserialize","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","eq","fmt","fmt","from","from","from_bytes","from_bytes","into","into","new","partial_cmp","prove_bit_length","serialize","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_bit_length","vzip","vzip","ED25519_KEYPAIR_LENGTH","ED25519_PRIVATE_KEY_LENGTH","ED25519_PUBLIC_KEY_LENGTH","ED25519_SIGNATURE_LENGTH","Ed25519AggregateSignature","Ed25519KeyPair","Ed25519PrivateKey","Ed25519PublicKey","Ed25519Signature","Ed25519SignatureAsBytes","SingleSignature","__clone_box","__clone_box","__clone_box","add_aggregate","add_signature","aggregate","as_ref","as_ref","as_ref","as_ref","as_ref","batch_verify","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","decode_base64","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_as","drop","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","initialize","initialize","insecure_default","into","into","into","into","into","into","partial_cmp","private","public","serialize","serialize","serialize","serialize","serialize","serialize_as","sig","sign","sigs","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","verify_different_msg","vzip","vzip","vzip","vzip","vzip","vzip","zeroize","zeroize","Base58","Base64","Encoding","Hex","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode","decode","decode","decode_bytes_hex","deserialize","deserialize","deserialize","deserialize_as","deserialize_as","deserialize_as","deserialize_as","deserialize_as","deserialize_as","encode","encode","encode","encode","encode_with_format","encoded","eq","eq","fmt","fmt","fmt","from","from","from","from_bytes","from_bytes","into","into","into","json_schema","json_schema","json_schema","schema_name","schema_name","schema_name","serialize","serialize","serialize","serialize_as","serialize_as","serialize_as","to_owned","to_owned","to_owned","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","FastCryptoError","FastCryptoResult","GeneralError","GeneralOpaqueError","InputLengthWrong","InputTooLong","InputTooShort","InvalidInput","InvalidProof","InvalidSignature","__clone_box","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from","into","provide","to_owned","to_string","try_from","try_into","type_id","vzip","GroupElement","HashToGroupElement","Other","Output","Pairing","Scalar","ScalarType","bls12381","generator","hash_to_group_element","pairing","rand","ristretto255","zero","G1Element","G1ElementAsBytes","G1_ELEMENT_BYTE_LENGTH","G2Element","G2ElementAsBytes","G2_ELEMENT_BYTE_LENGTH","GTElement","SCALAR_LENGTH","Scalar","__clone_box","__clone_box","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","div","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_byte_array","from_byte_array","from_byte_array","generator","generator","generator","generator","hash_to_group_element","hash_to_group_element","into","into","into","into","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","pairing","rand","serialize","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_byte_array","to_byte_array","to_byte_array","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero","zero","zero","zero","RistrettoPoint","RistrettoScalar","__clone_box","__clone_box","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","compress","decompress","default","deserialize","deserialize","div","div","eq","eq","fmt","fmt","from","from","from","from","from","from_byte_array","from_byte_array","from_bytes_mod_order_wide","from_uniform_bytes","generator","generator","group_order","hash_to_group_element","hash_to_group_element","initialize","into","into","map_to_point","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiscalar_mul","neg","neg","neg","neg","rand","serialize","serialize","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","to_byte_array","to_byte_array","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","zero","zero","Blake2b256","Blake3","Digest","EllipticCurveMultisetHash","Hash","HashFunction","HashFunctionWrapper","Keccak256","MultisetHash","OUTPUT_SIZE","ReverseWrapper","Sha256","Sha3_256","Sha3_512","Sha512","TypedDigest","Variant","__clone_box","__clone_box","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone_into","clone_into","cmp","default","default","default","deserialize","deserialize","digest","digest","digest","digest","digest","digest_iterator","encode_hex","encode_hex_upper","eq","eq","finalize","finalize","finalize","flush","fmt","fmt","fmt","from","from","from","from","hash","initialize","initialize","initialize","insert","insert","insert_all","insert_all","into","into","into","into","new","new","partial_cmp","remove","remove","remove_all","remove_all","serialize","serialize","size","to_owned","to_owned","to_string","to_vec","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","union","update","update","update","vzip","vzip","vzip","vzip","write","HkdfIkm","HmacKey","hkdf_sha3_256","hmac_sha3_256","PrivateSeed","as_bytes","as_ref","borrow","borrow_mut","decode_base64","drop","encode_base64","encode_hex","encode_hex_upper","eq","fmt","from","from_bytes","into","try_from","try_into","type_id","vzip","zeroize","DefaultHash","SECP256K1","SECP256K1_KEYPAIR_LENGTH","SECP256K1_PRIVATE_KEY_LENGTH","SECP256K1_PUBLIC_KEY_LENGTH","SECP256K1_SIGNATURE_LENGTH","Secp256k1KeyPair","Secp256k1PrivateKey","Secp256k1PublicKey","Secp256k1Signature","Secp256k1SignatureAsBytes","__clone_box","__clone_box","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","clone","clone","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","deserialize","deserialize","deserialize","deserialize","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","into","into","into","into","partial_cmp","private","privkey","pubkey","public","public","recoverable","secret","serialize","serialize","serialize","serialize","sig","sign","sign_recoverable_with_hash","sign_with_hash","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_hash","vzip","vzip","vzip","vzip","zeroize","SECP256K1","SECP256K1_RECOVERABLE_SIGNATURE_SIZE","Secp256k1RecoverableSignature","__clone_box","as_ref","borrow","borrow_mut","bytes","clone","clone_into","decode_base64","deserialize","encode_base64","encode_hex","encode_hex_upper","eq","fmt","fmt","from","from_bytes","hash","into","recover_with_hash","serialize","sig","to_owned","to_string","try_from","try_from_nonrecoverable","try_into","type_id","vzip","DefaultHash","SECP256R1_KEYPAIR_LENGTH","SECP256R1_PRIVATE_KEY_LENGTH","SECP256R1_PUBLIC_KEY_LENGTH","SECP256R1_SIGNATURE_LENTH","Secp256r1KeyPair","Secp256r1PrivateKey","Secp256r1PublicKey","Secp256r1Signature","Secp256r1SignatureAsBytes","__clone_box","__clone_box","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","bytes","clone","clone","clone_into","clone_into","cmp","decode_base64","decode_base64","decode_base64","decode_base64","deserialize","deserialize","deserialize","deserialize","drop","encode_base64","encode_base64","encode_base64","encode_base64","encode_hex","encode_hex","encode_hex","encode_hex","encode_hex_upper","encode_hex_upper","encode_hex_upper","encode_hex_upper","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_str","generate","hash","hash","into","into","into","into","partial_cmp","private","privkey","pubkey","public","public","recoverable","secret","serialize","serialize","serialize","serialize","sig","sign","sign_recoverable_with_hash","sign_with_hash","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify_with_hash","vzip","vzip","vzip","vzip","zeroize","SECP256R1_RECOVERABLE_SIGNATURE_LENGTH","Secp256r1RecoverableSignature","__clone_box","as_ref","borrow","borrow_mut","bytes","clone","clone_into","decode_base64","deserialize","encode_base64","encode_hex","encode_hex_upper","eq","fmt","fmt","from","from_bytes","hash","into","recover_with_hash","recovery_id","serialize","sig","to_owned","to_string","try_from","try_from_nonrecoverable","try_into","type_id","vzip","BYTE_LENGTH","BytesRepresentation","SerializationHelper","ToFromByteArray","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","deserialize","eq","fmt","from","from","from","from","from","from","from","from","from","from","from","from_byte_array","into","into","is_referenceable","json_schema","keypair_decode_base64","schema_name","serialize","serialize","to_byte_array","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SignatureService","__clone_box","borrow","borrow_mut","clone","clone_into","from","into","new","request_signature","to_owned","try_from","try_into","type_id","vzip","AggregateAuthenticator","AllowedRng","Authenticator","DefaultHash","EncodeDecodeBase64","FromUniformBytes","Generate","InsecureDefault","KeyPair","LENGTH","LENGTH","LENGTH","PrivKey","PrivKey","PrivKey","PrivKey","PubKey","PubKey","PubKey","PubKey","PubKey","PubKey","RecoverableSignature","RecoverableSigner","Sig","Sig","Sig","Sig","Sig","Sig","Signer","Signer","SigningKey","ToFromBytes","VerifyRecoverable","VerifyingKey","add_aggregate","add_signature","aggregate","as_bytes","batch_verify","decode_base64","encode_base64","from_bytes","generate","generate","generate","insecure_default","private","public","recover","recover_with_hash","sign","sign_recoverable","sign_recoverable_with_hash","verify","verify","verify_different_msg","verify_recoverable","verify_recoverable_with_hash","PrivateKey","PrivateKey","Proof","PublicKey","PublicKey","PublicKey","VRFKeyPair","VRFPrivateKey","VRFProof","VRFPublicKey","ecvrf","generate","output","prove","to_hash","verify","verify_output","ECVRFKeyPair","ECVRFPrivateKey","ECVRFProof","ECVRFPublicKey","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","generate","into","into","into","into","pk","prove","serialize","serialize","serialize","serialize","sk","to_hash","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip"],"q":["fastcrypto","","","","","","","","","","","","","","","","","","","","fastcrypto::aes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::bls12381","","","","","","fastcrypto::bls12381::min_pk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::bls12381::min_sig","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::bulletproofs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::edfastcrypto::encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::groups","","","","","","","","","","","","","","fastcrypto::groups::bls12381","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::groups::ristretto255","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::hmac","","","","fastcrypto::private_seed","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256k1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256k1::recoverable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256r1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::secp256r1::recoverable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::serde_helpers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::signature_service","","","","","","","","","","","","","","","fastcrypto::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto::vrf","","","","","","","","","","","","","","","","","fastcrypto::vrf::ecvrf","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","This module contains implementations of various AES modes.","This module contains an implementation of the BLS …","Implementation of Pedersen Commitments and Bulletproofs, …","This module contains an implementation of the Ed25519 …","Encodings of binary data such as Base64 and Hex.","Collection of errors to be used in fastcrypto.","Macro for generating a new alias for BytesRepresentation …","","This module contains a selection of cryptographic hash …","Implementations of HMAC and HKDF.","","This module contains an implementation of the ECDSA …","This module contains an implementation of the ECDSA …","","Macro for generating Serialize/Deserialize for a type that …","","","","","AES128 in CBC-mode using ANSI X9.23 padding.","AES128 in CBC-mode using ISO 10126 padding.","AES128 in CBC-mode using PKCS #7 padding.","AES128 in CTR-mode.","AES128 in GCM-mode (authenticated) using the given nonce …","AES192 in CTR-mode.","AES256 in CBC-mode using ANSI X9.23 padding.","AES256 in CBC-mode using ISO 10126 padding.","AES256 in CBC-mode using PKCS #7 padding.","AES256 in CTR-mode.","AES256 in GCM-mode (authenticated) using the given nonce …","Aes in CBC mode","Aes in CTR mode","AES in GCM mode (authenticated).","A key of <code>N</code> bytes used with AES ciphers.","Trait impl’d by symmetric ciphers for authenticated …","Trait impl’d by symmetric ciphers.","Trait impl’d by encryption keys in symmetric cryptography","Struct wrapping an instance of a …","","","An <code>N</code> byte initialization vector used with AES ciphers.","Trait impl’d by nonces and IV’s used in symmetric …","","","","","","","","","","","","","","","Decrypt <code>ciphertext</code> using the given IV and return the …","","","","Decrypt <code>ciphertext</code> using the given IV and authentication …","","","","","","","Encrypt <code>plaintext</code> using the given IV and return the result.","","","","Encrypt <code>plaintext</code> using the given IV and authentication …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The length of public keys when using the min_pk module and …","The length of public keys when using the min_sig module …","The key pair bytes length used by helper is the same as …","The length of a private key in bytes.","Module minimizing the size of public keys. Module …","Module minimizing the size of signatures. Module …","Aggregation of multiple BLS 12-381 signatures.","","BLS 12-381 key pair.","BLS 12-381 private key.","BLS 12-381 public key.","","BLS 12-381 signature.","Hash-to-curve domain separation tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Aggregation of multiple BLS 12-381 signatures.","","BLS 12-381 key pair.","BLS 12-381 private key.","BLS 12-381 public key.","","BLS 12-381 signature.","Hash-to-curve domain separation tag.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Bulletproof Range Proofs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Pedersen commitment from a value, and a …","","Prove that the value is an unsigned integer with bit …","","","","","","","","","","Verifies that commitment is a Pedersen commitment of some …","","","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","Aggregation of multiple Ed25519 signatures.","","Ed25519 private key.","Ed25519 public key.","Ed25519 signature.","","Serde for a single signature of Ed25519AggregateSignature","","","","","","Parse a key from its byte representation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base64 encoding","Trait representing a general binary-to-string encoding.","Hex string encoding.","","","","","","","","","","","","","","","","Decode this encoding into bytes.","","","","Decodes a hex string to bytes. Both upper and lower case …","","","","","","","","","","Encode bytes into a string.","","","","Encodes bytes as a 0x prefixed hex string using lower case …","Get a string representation of this Base64 encoding.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Encodes bytes as a Base64.","Encodes bytes as a hex string.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Decodes this Base64 encoding to bytes.","Decodes this hex encoding to bytes.","","","","","","","","","","","","","","","Collection of errors to be used in fastcrypto.","","General cryptographic error.","General opaque cryptographic error.","Input length is wrong.","Input is to long.","Input is to short.","Invalid value was given to the function","Invalid proof was given to the function","Invalid signature was given to the function","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Trait impl’d by elements of an additive cyclic group.","Trait for groups that have a standardized “hash_to_point…","","","","Trait impl’d by scalars to be used with […","Type of scalars used in the [Self::mul] multiplication …","","Return an instance of the generator for this group.","Hashes the given message and maps the result to a group …","","","Implementations of the ristretto255 group which is a group …","Return an instance of the identity element in this group.","Elements of the group G_1 in BLS 12-381.","","","Elements of the group G_2 in BLS 12-381.","","","Elements of the subgroup G_T of F_q^{12} in BLS 12-381. …","Length of Scalars in bytes.","This represents a scalar modulo r = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents a point in the Ristretto group for Curve25519.","Represents a scalar.","","","","","","","","","","","","","","","","","","","","","","","","Return this point in compressed form.","Return this point in compressed form.","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Construct a RistrettoScalar by reducing a 64-byte …","Construct a RistrettoPoint from the given data using an …","","","The order of the base point.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct a RistrettoPoint from the given data using a …","","","","","","","","","","","","","Compute the linear combination of the given scalars and …","","","","","","","","","","","","","","","","","","","","","","","","","Decode a ristretto point in compressed binary form.","","","","","","","","","","The BLAKE2-256 hash function with 256 bit digests.","The BLAKE3 hash function with 256 bit digests.","Represents a digest of <code>DIGEST_LEN</code> bytes.","<code>EllipticCurveMultisetHash</code> (ECMH) is a homomorphic multiset …","This trait is implemented by all messages that can be …","Trait implemented by hash functions providing a output of …","This wraps a digest::Digest as a HashFunction.","The KECCAK hash function with 256 bit digests.","A Multiset Hash is a homomorphic hash function, which …","The length of this hash functions digests in bytes.","This trait allows using a HashFunctionWrapper where a …","The SHA-2 hash function with 256 bit digests.","The SHA-3 hash function with 256 bit digests.","The SHA-3 hash function with 512 bit digests.","The SHA-512 hash function with 512 bit digests.","The type of the digest when this is hashed.","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate a digest of the current state of this hash …","Compute the digest of the given data and consume the hash …","","","Compute a single digest from all slices in the iterator in …","","","","","Retrieve result and consume hash function.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Insert an item into this hash function.","","Insert multiple items into this hash function.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new hash function of the given type","Create a new digest containing the given bytes","","Remove an element from this hash function.","","Remove multiple items from this hash function.","","","","The size of this digest in bytes.","","","","Copy the digest into a new vector.","","","","","","","","","","","","","Add all the elements of another hash function into this …","","Process the given data, and update the internal of the …","","","","","","","","Type for input keying material in hkdf_sha3_256.","Type for key in hmac_sha3_256.","HMAC-based Extract-and-Expand Key Derivation Function …","Keyed-Hash Message Authentication Code (HMAC) using …","Private key/seed of any/fixed size.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Default hash function used for signing and verifying …","","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","Secp256k1 public/private key pair.","Secp256k1 private key.","Secp256k1 public key.","Secp256k1 ECDSA signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","This module contains an implementation of the ECDSA …","","","","","","","","Create a new recoverable signature over the given message. …","Create a new signature using the given hash function to …","","","","","","","","","","","","","","","","","","","","Verify the signature using the given hash function to hash …","","","","","","","Length of a compact signature followed by one extra byte …","Secp256k1 signature.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Recover public key from signature using the given hash …","","","","","","Convert a non-recoverable signature into a recoverable …","","","","Default hash function used for signing and verifying …","The key pair bytes length is the same as the private key …","The length of a private key in bytes.","The length of a public key in bytes.","The length of a signature in bytes.","Secp256r1 public/private key pair.","Secp256r1 private key.","Secp256r1 public key.","Secp256r1 signature.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","This module contains an implementation of the ECDSA …","","","","","","","","","Create a new signature using the given hash function to …","","","","","","","","","","","","","","","","","","","","Verify the signature using the given hash function to hash …","","","","","","","Secp256r1 signature.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","Recover the public key used to create this signature. This …","","","","","External types.","Serialization of internal types.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","This service holds the node’s private key. It takes …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Trait impl’d by aggregated signatures in asymmetric …","Trait impl’d by RNG’s accepted by fastcrypto.","Trait impl’d by signatures in asymmetric cryptography.","","Cryptographic material with an immediate conversion …","Trait impl’d by a keys/secret seeds for generating a …","Trait impl’d by cryptographic material that can be …","Trait for objects that support an insecure default value …","Trait impl’d by a public / private key pair in …","","","","","","","","","","","","","","Trait impl’d by recoverable signatures","Trait impl’d by public / private keypairs that can …","","","","","","","Trait impl’d by a key/keypair that can create signatures.","","Trait impl’d by private (secret) keys in asymmetric …","Trait impl’d by concrete types that represent digital …","","Trait impl’d by public keys in asymmetric cryptography.","","","Combine signatures into a single aggregated signature.","Borrow a byte slice representing the serialized form of …","Verify a batch of aggregate signatures, each consisting of …","","","Parse an object from its byte representation","Generate a new keypair using the given RNG.","Generate a new random instance using the given RNG.","","","Get the private key.","Get the public key.","Recover the public key from this signature.","Recover the public key from this signature. Assuming that …","Create a new signature over a message.","Sign as a recoverable signature.","Sign as a recoverable signature using the given hash …","Use Self to verify that the provided signature for a given …","Verify this aggregate signature assuming that all …","Verify this aggregate signature where the signatures are …","Verify a recoverable signature by recovering the public …","Verify a recoverable signature by recovering the public …","","","","","","","A keypair for a verifiable random function (VRF).","Represents a private key used to compute outputs for a …","A proof that the output of a VRF was computed correctly.","Represents a public key of which is use to verify outputs …","An implementation of an Elliptic Curve VRF (ECVRF) using …","Generate a new keypair using the given RNG.","Compute both hash and proof for the given input.","Generate a proof for the given input.","Compute the output of the VRF with this proof.","Verify the correctness of this proof.","Verify the correctness of this proof and VRF output.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,114,0,0,5,5,5,18,21,22,5,18,21,22,5,5,5,5,113,18,21,22,114,22,5,5,5,5,5,113,18,21,22,114,22,5,5,18,21,22,5,5,5,18,21,22,5,18,21,22,5,5,5,18,21,22,5,18,21,22,5,18,21,22,5,18,21,22,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,37,32,32,32,32,34,35,36,37,32,32,34,35,36,37,32,34,35,36,37,32,34,35,37,32,37,32,34,37,32,34,37,32,34,34,35,36,37,32,37,32,34,35,36,37,32,35,34,35,36,37,32,34,35,36,37,32,34,35,36,37,32,34,35,36,37,32,34,34,35,35,36,37,37,32,32,34,34,35,36,36,37,32,32,34,35,36,37,32,36,36,34,37,37,32,34,34,35,36,37,32,34,36,35,34,36,34,35,36,37,32,37,32,35,36,34,37,32,34,35,37,32,34,34,35,36,37,32,32,34,35,36,37,32,34,35,36,37,32,34,34,32,32,34,35,36,37,32,35,0,0,0,0,0,0,0,0,45,48,44,44,44,44,45,46,47,48,44,44,45,46,47,48,44,45,46,47,48,44,45,46,48,44,48,44,45,48,44,45,48,44,45,45,46,47,48,44,48,44,45,46,47,48,44,46,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,45,46,46,47,48,48,44,44,45,45,46,47,47,48,44,44,45,46,47,48,44,47,47,45,48,48,44,45,45,46,47,48,44,45,47,46,45,47,45,46,47,48,44,48,44,46,47,45,48,44,45,46,48,44,45,45,46,47,48,44,44,45,46,47,48,44,45,46,47,48,44,45,45,44,44,45,46,47,48,44,46,0,0,49,49,49,50,49,50,49,50,49,49,49,49,50,49,49,50,49,50,49,50,49,49,50,49,50,49,50,49,50,49,49,50,49,49,49,49,50,49,50,49,50,50,49,50,0,0,0,0,0,0,0,0,0,0,0,54,57,53,53,53,53,54,55,56,57,53,53,115,54,55,56,57,53,115,54,55,56,57,53,57,53,57,53,54,57,53,54,57,53,54,54,55,56,57,53,57,53,54,55,56,57,53,115,55,56,54,55,56,57,53,54,55,56,57,53,54,55,56,57,53,54,55,56,57,53,54,54,55,55,56,57,57,53,53,115,54,54,55,56,56,56,57,53,54,55,56,57,53,56,56,54,57,53,54,115,54,55,56,57,53,54,56,56,54,55,56,57,53,115,57,56,53,54,57,53,54,55,57,53,115,54,55,56,57,57,53,115,54,55,56,57,53,115,54,55,56,57,53,54,53,53,115,54,55,56,57,53,55,56,0,0,0,0,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,116,61,62,63,0,61,62,63,61,61,62,62,63,63,116,61,62,63,0,61,61,63,61,62,63,61,62,63,61,62,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,63,61,62,61,61,62,63,63,61,62,63,61,62,63,61,62,63,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,117,117,0,0,118,0,118,119,117,120,0,118,0,0,0,0,0,0,0,0,0,71,72,73,74,71,71,71,71,72,72,72,72,73,73,73,73,74,74,74,74,71,71,72,72,73,73,74,74,71,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,71,72,74,74,71,72,73,74,71,72,73,74,71,71,72,72,73,73,74,74,74,71,72,74,71,72,73,74,71,72,71,72,73,74,71,71,71,71,72,72,72,72,73,73,73,73,74,74,74,74,71,71,72,72,73,73,74,74,71,71,72,72,73,73,74,74,71,74,71,72,74,71,71,71,71,72,72,72,72,73,73,73,73,74,74,74,74,71,71,72,72,73,73,74,74,71,72,74,71,72,73,74,71,71,72,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,71,72,73,74,0,0,79,80,79,79,79,79,80,80,80,80,79,79,80,80,79,80,79,80,79,79,80,79,80,79,79,79,79,80,80,80,79,80,79,80,79,79,80,80,80,79,80,80,79,79,80,80,79,80,79,79,80,79,79,79,79,79,80,80,80,80,79,79,80,80,79,79,79,80,80,80,79,80,79,79,79,79,80,80,80,80,79,79,80,80,79,80,79,80,79,79,80,79,80,79,80,79,80,79,80,0,0,0,0,0,0,0,0,0,121,0,0,0,0,0,122,123,83,84,83,83,87,88,84,83,87,88,84,87,88,84,83,84,83,84,83,87,88,84,83,84,122,124,121,84,83,121,83,83,83,84,121,87,88,87,83,83,84,83,87,88,84,83,87,88,84,124,84,124,84,83,87,88,84,121,83,83,124,84,124,84,83,84,83,83,84,83,83,83,87,88,84,83,87,88,84,83,87,88,84,124,84,121,87,88,83,87,88,84,87,0,0,0,0,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,0,0,0,0,0,0,0,0,0,0,93,95,93,94,95,96,93,94,95,96,93,94,95,96,93,94,95,93,95,93,95,93,93,94,95,96,93,94,95,96,94,93,94,95,96,93,94,95,96,93,94,95,96,93,94,95,96,93,93,94,94,95,95,96,93,93,94,95,95,96,96,93,94,95,96,96,96,93,95,93,94,95,96,93,96,94,93,96,96,0,96,93,94,95,96,95,96,96,96,93,95,93,94,95,93,94,95,95,96,93,94,95,96,93,94,95,96,93,93,93,94,95,96,94,0,0,0,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,0,0,0,0,0,0,0,0,0,0,98,100,98,99,100,101,98,99,100,101,98,99,100,101,98,99,100,98,100,98,100,98,98,99,100,101,98,99,100,101,99,98,99,100,101,98,99,100,101,98,99,100,101,98,99,100,101,98,98,99,99,100,100,101,98,98,99,100,100,101,101,98,99,100,101,101,101,98,100,98,99,100,101,98,101,99,98,101,101,0,101,98,99,100,101,100,101,101,101,98,100,98,99,100,98,99,100,100,101,98,99,100,101,98,99,100,101,98,98,98,99,100,101,99,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,125,0,0,0,43,103,43,103,43,43,43,103,43,43,43,103,43,43,43,43,43,43,43,43,43,43,125,103,43,43,43,0,43,103,43,125,43,103,43,103,43,103,43,103,43,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,126,0,0,0,0,0,127,128,105,127,105,104,129,128,105,104,130,126,129,0,0,127,128,104,130,131,129,0,126,0,0,0,0,129,129,129,132,129,133,133,132,104,134,135,136,104,104,126,126,107,130,130,127,129,129,131,131,137,138,138,139,138,140,0,0,0,0,0,138,138,138,140,140,140,0,0,0,0,109,110,111,112,109,110,111,112,109,110,111,112,109,110,111,112,109,110,111,112,109,110,111,111,112,111,109,110,111,112,111,111,109,110,111,112,111,112,109,110,111,112,109,110,111,112,109,110,111,112,112,109,110,111,112],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[[5,[[0,[[3,[2]],4]]]]]],[[[5,[[3,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[5,[[0,[6,[3,[2]]]]]]],[[5,[[0,[6,[3,[2]]]]]]]],[[]],[7,[[9,[8]]]],[[],[[9,[[10,[2]],11]]]],[[[18,[[3,[2]],[0,[12,13,14,15,16,17]]]]],[[9,[[10,[2]],11]]]],[[[21,[[3,[2]],[0,[12,13,14,15,16,17]],[20,[19]]]]],[[9,[[10,[2]],11]]]],[[[22,[[3,[2]],[0,[12,13,14,15,16]],[0,[[3,[2]],4]]]]],[[9,[[10,[2]],11]]]],[[],[[9,[[10,[2]],11]]]],[[[22,[[3,[2]],[0,[12,13,14,15,16]],[0,[[3,[2]],4]]]]],[[9,[[10,[2]],11]]]],[23,[[9,[[5,[[3,[2]]]]]]]],[[[5,[[3,[2]]]]]],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[10,[2]]]],[[[18,[[3,[2]],[0,[12,13,14,15,16,17]]]]],[[10,[2]]]],[[[21,[[3,[2]],[0,[12,13,14,15,16,17]],[20,[19]]]]],[[10,[2]]]],[[[22,[[3,[2]],[0,[12,13,14,15,16]],[0,[[3,[2]],4]]]]],[[10,[2]]]],[[],[[10,[2]]]],[[[22,[[3,[2]],[0,[12,13,14,15,16]],[0,[[3,[2]],4]]]]],[[10,[2]]]],[[[5,[[3,[2]]]],27],28],[[[5,[[3,[2]]]],27],28],[[]],[[]],[[]],[[]],[[],[[9,[[5,[[0,[[3,[2]],4]]]],11]]]],[[],[[29,[[0,[[3,[2]],4]]]]]],[[]],[[]],[[]],[[]],[[[29,[[3,[2]]]]],[[18,[[3,[2]]]]]],[[[29,[[3,[2]]]]],[[21,[[3,[2]]]]]],[[[29,[[3,[2]]]]],[[22,[[3,[2]]]]]],[[[5,[[3,[2]]]],30],9],[[]],[[],24],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[[5,[[3,[2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[32,32],[[9,[11]]]],[32,[[9,[11]]]],[33,[[9,[32,11]]]],[34],[35],[36],[37],[32],[[[10,[38]]],[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[34,34],[37,37],[32,32],[[]],[[]],[[]],[[34,34],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[[],37],[[],32],[23,[[9,[34]]]],[23,[[9,[35]]]],[23,[[9,[36]]]],[23,[[9,[37]]]],[23,[[9,[32]]]],[35],[[],24],[[],24],[[],24],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[34,34],40],[[35,35],40],[[36,36],40],[[37,37],40],[[32,32],40],[[34,27],[[9,[41]]]],[[34,27],[[9,[41]]]],[[35,27],28],[[35,27],28],[[36,27],28],[[37,27],[[9,[41]]]],[[37,27],28],[[32,27],[[9,[41]]]],[[32,27],28],[35,34],[[]],[[]],[[]],[35,36],[[]],[[]],[37,32],[[],[[9,[34,11]]]],[[],[[9,[35,11]]]],[[],[[9,[36,11]]]],[[],[[9,[37,11]]]],[[],[[9,[32,11]]]],[7,[[9,[36]]]],[[],36],[34],[37],[[]],[[]],[[],34],[[]],[[]],[[]],[[]],[[]],[[34,34],[[42,[39]]]],[36],0,0,[36],[[34,30],9],[[35,30],9],[[36,30],9],[[37,30],9],[[32,30],9],0,0,[35,37],[36,37],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[43,[[9,[34]]]],[[],9],[[],9],[[],9],[[],9],[43,[[9,[32]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[],31],[34,[[9,[11]]]],[[34,37],[[9,[11]]]],[32,[[9,[11]]]],[32,[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[35],0,0,0,0,0,0,0,0,[1],[1],[1],[[44,44],[[9,[11]]]],[44,[[9,[11]]]],[33,[[9,[44,11]]]],[45],[46],[47],[48],[44],[[[10,[38]]],[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[45,45],[48,48],[44,44],[[]],[[]],[[]],[[45,45],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[[],48],[[],44],[23,[[9,[45]]]],[23,[[9,[46]]]],[23,[[9,[47]]]],[23,[[9,[48]]]],[23,[[9,[44]]]],[46],[[],24],[[],24],[[],24],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[45,45],40],[[46,46],40],[[47,47],40],[[48,48],40],[[44,44],40],[[45,27],[[9,[41]]]],[[45,27],[[9,[41]]]],[[46,27],28],[[46,27],28],[[47,27],28],[[48,27],[[9,[41]]]],[[48,27],28],[[44,27],28],[[44,27],[[9,[41]]]],[46,45],[[]],[[]],[[]],[46,47],[[]],[[]],[48,44],[[],[[9,[45,11]]]],[[],[[9,[46,11]]]],[[],[[9,[47,11]]]],[[],[[9,[48,11]]]],[[],[[9,[44,11]]]],[7,[[9,[47]]]],[[],47],[45],[48],[[]],[[]],[[],45],[[]],[[]],[[]],[[]],[[]],[[45,45],[[42,[39]]]],[47],0,0,[47],[[45,30],9],[[46,30],9],[[47,30],9],[[48,30],9],[[44,30],9],0,0,[46,48],[47,48],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],9],[43,[[9,[45]]]],[[],9],[[],9],[[],9],[[],9],[43,[[9,[44]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[],31],[45,[[9,[11]]]],[[45,48],[[9,[11]]]],[44,[[9,[11]]]],[44,[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[46],0,0,[1],[[49,49],49],[49],[50],[[]],[[]],[[]],[[]],[49,49],[[]],[[49,49],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[23,[[9,[49]]]],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[49,49],40],[[49,27],28],[[50,27],28],[[]],[[]],[[],[[9,[49,11]]]],[[],[[9,[50,11]]]],[[]],[[]],[[],49],[[49,49],[[42,[39]]]],[[51,52],[[9,[11]]]],[[49,30],9],[[49,49],49],[[]],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[50,49,52],[[9,[11]]]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[[53,53],[[9,[11]]]],[53,[[9,[11]]]],[33,[[9,[53,11]]]],[54],[55],[56],[57],[53],[[[10,[58]]],[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[54,54],[57,57],[53,53],[[]],[[]],[[]],[[54,54],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[[],57],[[],53],[23,[[9,[54]]]],[23,[[9,[55]]]],[23,[[9,[56]]]],[23,[[9,[57]]]],[23,[[9,[53]]]],[23,[[9,[59]]]],[55],[56],[[],24],[[],24],[[],24],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[54,54],40],[[55,55],40],[[56,56],40],[[57,57],40],[[53,53],40],[[54,27],[[9,[41]]]],[[54,27],28],[[55,27],28],[[55,27],28],[[56,27],28],[[57,27],[[9,[41]]]],[[57,27],28],[[53,27],[[9,[41]]]],[[53,27],28],[[]],[[]],[55,54],[[]],[[]],[60,56],[55,56],[[]],[[]],[[],[[9,[54,11]]]],[[],[[9,[55,11]]]],[[],[[9,[56,11]]]],[[],[[9,[57,11]]]],[[],[[9,[53,11]]]],[7,[[9,[56]]]],[[],56],[54],[[]],[[]],[[],54],[[]],[[]],[[]],[[]],[[]],[[]],[[54,54],[[42,[39]]]],[56],[56],[[54,30],9],[[55,30],9],[[56,30],9],[[57,30],9],[[53,30],9],[[59,30],9],0,[56,57],0,[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],9],[[],9],[[],9],[[],9],[[],9],[43,[[9,[57]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[54,57],[[9,[11]]]],[53,[[9,[11]]]],[53,[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[55],[56],0,0,0,0,[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[61,61],[62,62],[63,63],[[]],[[]],[[]],[7,[[64,[[10,[2]]]]]],[7,[[64,[[10,[2]],8]]]],[7,[[64,[[10,[2]],8]]]],[7,[[64,[[10,[2]],8]]]],[7,[[64,[65]]]],[23,[[9,[61]]]],[23,[[9,[62]]]],[23,[[9,[63]]]],[23,[[64,[[10,[2]]]]]],[23,64],[23,[[64,[[10,[2]]]]]],[23,64],[23,[[64,[[10,[2]]]]]],[23,64],[66,24],[66,24],[66,24],[66,24],[66,24],[61,24],[[61,61],40],[[63,63],40],[[61,27],28],[[62,27],28],[[63,27],28],[[]],[[]],[[]],[[],61],[[],62],[[]],[[]],[[]],[67,68],[67,68],[67,68],[[],24],[[],24],[[],24],[[61,30],9],[[62,30],9],[[63,30],9],[30,64],[30,64],[30,64],[[]],[[]],[[]],[61,[[64,[[10,[2]],8]]]],[62,[[64,[[10,[2]],8]]]],[24,[[64,[61]]]],[[],9],[[],9],[[],9],[24,[[64,[63]]]],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[11,11],[[]],[[11,11],40],[[11,27],28],[[11,27],28],[[]],[69,11],[[]],[70],[[]],[[],24],[[],9],[[],9],[[],31],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[]],0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[72,72]],[[72,72]],[[72,72]],[[72,72]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[74,74]],[[74,74]],[[74,74]],[[74,74]],[[71,71]],[[71,71]],[[72,72]],[[72,72]],[[73,73]],[[73,73]],[[74,74]],[[74,74]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[72,72],[73,73],[74,74],[[]],[[]],[[]],[[]],[23,[[9,[71]]]],[23,[[9,[72]]]],[23,[[9,[74]]]],[[74,74],[[9,[74,11]]]],[[71,71],40],[[72,72],40],[[73,73],40],[[74,74],40],[[71,27],28],[[72,27],28],[[73,27],28],[[74,27],28],[75,71],[[]],[[]],[76,72],[77,73],[[]],[[]],[51,74],[78,74],[[],[[9,[71,11]]]],[[],[[9,[72,11]]]],[[],[[9,[74,11]]]],[[],71],[[],72],[[],73],[[],74],[[],71],[[],72],[[]],[[]],[[]],[[]],[71],[71],[71],[[71,74]],[72],[[72,74]],[72],[72],[73],[73],[73],[[73,74]],[74],[74],[74],[[74,74]],[71],[71],[72],[72],[73],[73],[74],[74],[71],[71],[72],[72],[73],[73],[74],[74],[71],[[],74],[[71,30],9],[[72,30],9],[[74,30],9],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[72,72]],[[72,72]],[[72,72]],[[72,72]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[74,74]],[[74,74]],[[74,74]],[[74,74]],[[71,71]],[[71,71]],[[72,72]],[[72,72]],[[73,73]],[[73,73]],[[74,74]],[[74,74]],[71],[72],[74],[[]],[[]],[[]],[[]],[43,[[9,[71]]]],[[],9],[43,[[9,[72]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[]],[[]],[[]],[[]],[[],71],[[],72],[[],73],[[],74],0,0,[1],[1],[[79,79]],[[79,79]],[[79,79]],[[79,79],79],[[80,80]],[[80,80],80],[[80,80]],[[80,80]],[[79,79]],[[79,79]],[[80,80]],[[80,80]],[[]],[[]],[[]],[[]],[[]],[79,79],[80,80],[[]],[[]],[79],[[],[[9,[79,11]]]],[[],79],[23,[[9,[79]]]],[23,[[9,[80]]]],[[80,80],[[9,[80,11]]]],[80,80],[[79,79],40],[[80,80],40],[[79,27],28],[[80,27],28],[81,79],[[]],[51,80],[82,80],[[]],[[],[[9,[79,11]]]],[[],[[9,[80,11]]]],[[],80],[[],79],[[],79],[[],80],[[],80],[[],79],[[],80],[[]],[[]],[[]],[[],79],[79],[79],[[79,80],79],[79],[[80,80],80],[80],[80],[80],[79],[79],[80],[80],[[33,33],[[9,[79,11]]]],[79],[79,79],[80],[80,80],[[],80],[[79,30],9],[[80,30],9],[[79,79],79],[[79,79]],[[79,79]],[[79,79]],[[80,80]],[[80,80]],[[80,80]],[[80,80],80],[[79,79]],[[79,79]],[[80,80]],[[80,80]],[79],[80],[[]],[[]],[[],9],[[],[[9,[79,11]]]],[[],9],[[],9],[[],9],[[],31],[[],31],[[]],[[]],[[],79],[[],80],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,83],[84,84],[[]],[[]],[[83,83],39],[[],[[87,[[0,[85,86]]]]]],[[],88],[[],84],[23,[[9,[83]]]],[23,[[9,[84]]]],[[]],[[],83],[66,83],[84,83],0,[38,83],[[],[[26,[25]]]],[[],[[26,[25]]]],[[83,83],40],[[84,84],40],[[],83],[[[87,[[0,[86,85]]]]],83],[88,83],[[[87,[[0,[86,85]]]]],89],[[83,27],[[9,[41]]]],[[83,27],[[9,[41]]]],[[84,27],28],[[]],[[]],[[]],[[]],[83],[[]],[[]],[[]],[66],[[84,66]],[33],[[84,33]],[[]],[[]],[[]],[[]],[[]],[[],83],[[83,83],[[42,[39]]]],[66],[[84,66]],[33],[[84,33]],[[83,30],9],[[84,30],9],[83,52],[[]],[[]],[[],24],[83,[[10,[2]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[]],[[84,84]],[66],[[[87,[[0,[86,85]]]],66]],[[88,66]],[[]],[[]],[[]],[[]],[[[87,[[0,[86,85]]]]],[[89,[52]]]],0,0,[[90,52],[[9,[[10,[2]],11]]]],[91,83],0,[92],[92],[[]],[[]],[7,[[9,[8]]]],[92],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[92,92],40],[[92,27],28],[[]],[[],[[9,[92,11]]]],[[]],[[],9],[[],9],[[],31],[[]],[92],0,0,0,0,0,0,0,0,0,0,0,[1],[1],[93],[94],[95],[96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[93,93],[95,95],[[]],[[]],[[93,93],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[23,[[9,[93]]]],[23,[[9,[94]]]],[23,[[9,[95]]]],[23,[[9,[96]]]],[94],[[],24],[[],24],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[93,93],40],[[94,94],40],[[95,95],40],[[96,96],40],[[93,27],28],[[93,27],28],[[94,27],28],[[94,27],28],[[95,27],[[9,[41]]]],[[95,27],28],[[96,27],28],[[]],[94,93],[[]],[97,95],[[]],[[]],[94,96],[[],[[9,[93,11]]]],[[],[[9,[94,11]]]],[[],[[9,[95,11]]]],[[],[[9,[96,11]]]],[7,[[9,[96]]]],[[],96],[93],[95],[[]],[[]],[[]],[[]],[[93,93],[[42,[39]]]],[96],0,0,[96],0,0,0,[[93,30],9],[[94,30],9],[[95,30],9],[[96,30],9],0,[96,95],[96,97],[96,95],[[]],[[]],[[],24],[[],24],[[],24],[[],9],[[],9],[43,[[9,[95]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[93,95],[[9,[11]]]],[[93,95],[[9,[11]]]],[[]],[[]],[[]],[[]],[94],0,0,0,[1],[97],[[]],[[]],0,[97,97],[[]],[7,[[9,[8]]]],[23,[[9,[97]]]],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[97,97],40],[[97,27],28],[[97,27],[[9,[41]]]],[[]],[[],[[9,[97,11]]]],[97],[[]],[97,[[9,[93,11]]]],[[97,30],9],0,[[]],[[],24],[[],9],[[95,93],[[9,[97,11]]]],[[],9],[[],31],[[]],0,0,0,0,0,0,0,0,0,0,[1],[1],[98],[99],[100],[101],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[98,98],[100,100],[[]],[[]],[[98,98],39],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[7,[[9,[8]]]],[23,[[9,[98]]]],[23,[[9,[99]]]],[23,[[9,[100]]]],[23,[[9,[101]]]],[99],[[],24],[[],24],[[],24],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[],[[26,[25]]]],[[98,98],40],[[99,99],40],[[100,100],40],[[101,101],40],[[98,27],28],[[98,27],28],[[99,27],28],[[99,27],28],[[100,27],28],[[100,27],[[9,[41]]]],[[101,27],28],[99,98],[[]],[[]],[102,100],[[]],[99,101],[[]],[[],[[9,[98,11]]]],[[],[[9,[99,11]]]],[[],[[9,[100,11]]]],[[],[[9,[101,11]]]],[7,[[9,[101]]]],[[],101],[98],[100],[[]],[[]],[[]],[[]],[[98,98],[[42,[39]]]],[101],0,0,[101],0,0,0,[[98,30],9],[[99,30],9],[[100,30],9],[[101,30],9],0,[101,100],[101,102],[101,100],[[]],[[]],[[],24],[[],24],[[],24],[[],9],[[],9],[43,[[9,[100]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[[98,100],[[9,[11]]]],[[98,100],[[9,[11]]]],[[]],[[]],[[]],[[]],[99],0,0,[1],[102],[[]],[[]],0,[102,102],[[]],[7,[[9,[8]]]],[23,[[9,[102]]]],[[],24],[[],[[26,[25]]]],[[],[[26,[25]]]],[[102,102],40],[[102,27],28],[[102,27],[[9,[41]]]],[[]],[[],[[9,[102,11]]]],[102],[[]],[102,[[9,[98,11]]]],0,[[102,30],9],0,[[]],[[],24],[[],9],[[100,98],[[9,[102,11]]]],[[],9],[[],31],[[]],0,0,0,0,[1],[[]],[[]],[[]],[[]],[43,43],[[]],[23,[[9,[103]]]],[23,[[9,[43]]]],[[43,43],40],[[43,27],28],[[]],[34,43],[45,43],[100,43],[95,43],[71,43],[57,43],[44,43],[72,43],[32,43],[[]],[[],[[9,[11]]]],[[]],[[]],[[],40],[67,68],[7,[[9,[104,8]]]],[[],24],[[103,30],9],[[43,30],9],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[]],[[]],0,[1],[[]],[[]],[[[106,[[0,[6,105]]]]],[[106,[[0,[6,105]]]]]],[[]],[[]],[[]],[[[0,[[107,[105]],108]]],[[106,[105]]]],[[[106,[105]],83],105],[[]],[[],9],[[],9],[[],31],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[9,[11]]]],[[],[[9,[11]]]],[33,[[9,[11]]]],[[]],[[[10,[58]]],[[9,[11]]]],[7,[[9,[8]]]],[[],24],[[],[[9,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[]],[[]],[[]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[],[[9,[11]]]],[[],[[9,[11]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[9,[11]]]],[[],[[9,[11]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[9,[109]]]],[23,[[9,[110]]]],[23,[[9,[111]]]],[23,[[9,[112]]]],[[109,109],40],[[110,110],40],[[111,111],40],[[112,112],40],[[109,27],28],[[110,27],28],[[111,27],28],[[112,27],28],[[]],[[]],[110,111],[[]],[[]],[[],111],[[]],[[]],[[]],[[]],0,[111,112],[[109,30],9],[[110,30],9],[[111,30],9],[[112,30],9],0,[112],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],31],[[],31],[[],31],[[],31],[112,[[9,[11]]]],[[]],[[]],[[]],[[]]],"p":[[3,"Private"],[15,"u8"],[8,"ArrayLength"],[8,"Debug"],[3,"GenericByteArray"],[8,"Clone"],[15,"str"],[3,"Report"],[4,"Result"],[3,"Vec"],[4,"FastCryptoError"],[8,"KeySizeUser"],[8,"KeyInit"],[8,"BlockCipher"],[8,"BlockSizeUser"],[8,"BlockEncrypt"],[8,"BlockDecrypt"],[3,"AesCtr"],[6,"U16"],[8,"Padding"],[3,"AesCbc"],[3,"AesGcm"],[8,"Deserializer"],[3,"String"],[15,"char"],[8,"FromIterator"],[3,"Formatter"],[6,"Result"],[6,"AesKey"],[8,"Serializer"],[3,"TypeId"],[3,"BLS12381AggregateSignature"],[8,"IntoIterator"],[3,"BLS12381PublicKey"],[3,"BLS12381PrivateKey"],[3,"BLS12381KeyPair"],[3,"BLS12381Signature"],[8,"Iterator"],[4,"Ordering"],[15,"bool"],[3,"Error"],[4,"Option"],[3,"BytesRepresentation"],[3,"BLS12381AggregateSignature"],[3,"BLS12381PublicKey"],[3,"BLS12381PrivateKey"],[3,"BLS12381KeyPair"],[3,"BLS12381Signature"],[3,"PedersenCommitment"],[3,"BulletproofsRangeProof"],[15,"u64"],[15,"usize"],[3,"Ed25519AggregateSignature"],[3,"Ed25519PublicKey"],[3,"Ed25519PrivateKey"],[3,"Ed25519KeyPair"],[3,"Ed25519Signature"],[8,"ExactSizeIterator"],[3,"Signature"],[3,"SigningKey"],[3,"Base64"],[3,"Hex"],[3,"Base58"],[6,"Result"],[8,"TryFrom"],[8,"AsRef"],[3,"SchemaGenerator"],[4,"Schema"],[3,"Error"],[3,"Demand"],[3,"G1Element"],[3,"G2Element"],[3,"GTElement"],[3,"Scalar"],[3,"blst_p1"],[3,"blst_p2"],[3,"blst_fp12"],[3,"blst_fr"],[3,"RistrettoPoint"],[3,"RistrettoScalar"],[3,"RistrettoPoint"],[3,"Scalar"],[3,"Digest"],[3,"EllipticCurveMultisetHash"],[8,"Default"],[8,"Digest"],[3,"HashFunctionWrapper"],[3,"Blake3"],[6,"Result"],[6,"HkdfIkm"],[6,"HmacKey"],[3,"PrivateSeed"],[3,"Secp256k1PublicKey"],[3,"Secp256k1PrivateKey"],[3,"Secp256k1Signature"],[3,"Secp256k1KeyPair"],[3,"Secp256k1RecoverableSignature"],[3,"Secp256r1PublicKey"],[3,"Secp256r1PrivateKey"],[3,"Secp256r1Signature"],[3,"Secp256r1KeyPair"],[3,"Secp256r1RecoverableSignature"],[3,"SerializationHelper"],[8,"KeyPair"],[8,"Authenticator"],[3,"SignatureService"],[8,"Signer"],[8,"Send"],[3,"ECVRFPublicKey"],[3,"ECVRFPrivateKey"],[3,"ECVRFKeyPair"],[3,"ECVRFProof"],[8,"Cipher"],[8,"AuthenticatedCipher"],[3,"SingleSignature"],[8,"Encoding"],[8,"Pairing"],[8,"GroupElement"],[8,"HashToGroupElement"],[8,"Scalar"],[8,"HashFunction"],[8,"Hash"],[8,"ReverseWrapper"],[8,"MultisetHash"],[8,"ToFromByteArray"],[8,"RecoverableSignature"],[8,"VerifyingKey"],[8,"SigningKey"],[8,"AggregateAuthenticator"],[8,"RecoverableSigner"],[8,"VerifyRecoverable"],[8,"ToFromBytes"],[8,"EncodeDecodeBase64"],[8,"Generate"],[8,"FromUniformBytes"],[8,"InsecureDefault"],[8,"VRFPublicKey"],[8,"VRFKeyPair"],[8,"VRFPrivateKey"],[8,"VRFProof"]]},\
"fastcrypto_derive":{"doc":"This crate contains the <code>SilentDebug</code> and <code>SilentDisplay</code> …","t":"YYY","n":["GroupOpsExtend","SilentDebug","SilentDisplay"],"q":["fastcrypto_derive","",""],"d":["Extend implementations of Add, Sub, Mul…","Derive the <code>SilentDebug</code> trait, which is an implementation …","Derive the <code>SilentDisplay</code> trait, which is an implementation …"],"i":[0,0,0],"f":[0,0,0],"p":[]},\
"fastcrypto_tbls":{"doc":"An experimental crate that implements threshold BLS (tBLS) …","t":"AAAAAAAEDDDNNGDDDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLLLLLLLLLLLLLLLLLMLLLLLLLLMMLMMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFGDGGLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLGQQGQILLLLLKGDGGGGGGGGGGDLLLLLLLLLLLLMLLLLLLLLLLMLLL","n":["dkg","ecies","mocked_dkg","polynomial","random_oracle","tbls","types","Complaint","DkgOutput","EncryptedShare","FirstMessage","InvalidEncryptedShare","NoShare","Nodes","Party","PkiNode","SecondMessage","SharesMap","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","aggregate","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complaints","create_first_message","create_second_message","deserialize","deserialize","encrypted_shares","encryption","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","id","into","into","into","into","into","into","into","new","nodes","pk","process_responses","receiver","sender","sender","serialize","serialize","share","threshold","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vss_pk","vss_pk","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Encryption","PrivateKey","PublicKey","RecoveryPackage","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_recovery_package","decrypt","decrypt_with_recovery_package","deserialize","deserialize","deserialize","encrypt","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_private_key","into","into","into","into","new","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","generate_full_key_pair","generate_public_keys","generate_share_and_public_keys","Eval","Poly","PrivatePoly","PublicPoly","__clone_box","add","borrow","borrow_mut","c0","clone","clone_into","commit","degree","deserialize","eq","eval","fmt","from","from","into","is_valid_share","rand","recover_c0","serialize","to_owned","try_from","try_into","type_id","vzip","zero","RandomOracle","__clone_box","borrow","borrow_mut","clone","clone_into","eq","evaluate","extend","from","into","new","to_owned","try_from","try_into","type_id","vzip","PartialSignature","Private","Public","Share","Signature","ThresholdBls","aggregate","partial_sign","partial_verify","sign","verify","verify_pairings","EciesEncryption","IndexedValue","PrivateBlsKey","PrivateEciesKey","PublicBlsKey","PublicEciesKey","PublicVssKey","RawSignature","RecoveryPackage","Share","ShareIndex","Signature","ThresholdBls12381MinSig","__clone_box","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","from","index","into","into","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","verify_pairings","vzip","vzip"],"q":["fastcrypto_tbls","","","","","","","fastcrypto_tbls::dkg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto_tbls::ecies","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto_tbls::mocked_dkg","","","fastcrypto_tbls::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto_tbls::random_oracle","","","","","","","","","","","","","","","","","fastcrypto_tbls::tbls","","","","","","","","","","","","fastcrypto_tbls::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","This module contains a set of functions for <strong>emulating</strong> the …","","","","","A complaint/fraud claim against a dealer that created …","DkgOutput is the final output of the DKG protocol in case …","EncryptedShare holds the ECIES encryption of a share …","[DkgFirstMessage] holds all encrypted shares a dealer …","The identity of the sender and the recovery package.","The identity of the sender.","","Party in the DKG protocol.","Generics below use …","A [DkgSecondMessage] is sent during the second phase of …","Mapping from node id to the share received from that …","","","","","","","","Aggregate the valid shares (as returned from the previous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List of complaints against other parties. Empty if there …","Create the first message to be broadcasted.","Process the first messages of exactly ‘threshold’ …","","","The encrypted shares created by the sender.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new ECIES private key and send the public key to …","","","Process all the second messages, check all complaints, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The commitment of the secret polynomial created by the …","","","","","","","","","","Simple ECIES encryption using a generic group and …","","A recovery package that allows decrypting a <em>specific</em> ECIES …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Emulate the output of the previous key recovery protocol.","Emulate the public output of DKG.","Emulate the output of DKG for a given id.","","A polynomial that is using a scalar for the variable x and …","","","","Performs polynomial addition in place.","","","Return the constant term of the polynomial.","","","Commits the scalar polynomial to the group and returns a …","Returns the degree of the polynomial","","","Evaluates the polynomial at the specified value.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Checks if a given share is valid.","Returns a new polynomial of the given degree where each …","Given at least <code>t</code> polynomial evaluations, it will recover …","","","","","","","Returns a polynomial with the zero element.","Random Oracle from Sha3.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","<code>Public</code> represents the group over which the public keys are …","","<code>Signature</code> represents the group over which the signatures …","Trait ThresholdBls provides sign &amp; verify functions for …","Interpolate partial signatures to recover the full …","Sign a message using the private share/partial key.","Verify a signature done by a partial key holder.","Sign a message using the private key.","Verify a signature on a given message.","Curve dependent implementation of computing and comparing …","","Wrapper of a value that is associated with a specific …","","ECIES related types with Ristretto points.","","","","","","tBLS with ThresholdBls12381MinSig types.","Indexes of shares/private keys (0 is reserved for the …","","Implementation of [ThresholdBls] for BLS12-381-min-sig. A …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,11,11,0,0,0,0,0,8,4,9,10,11,12,6,4,8,4,9,10,11,12,6,8,4,9,10,11,12,6,8,4,9,10,11,12,6,8,4,9,10,11,12,6,12,4,4,9,10,10,9,8,4,9,10,11,12,8,9,10,6,8,4,9,10,11,12,6,8,8,4,9,10,11,12,6,4,6,8,4,9,10,12,9,10,6,4,8,4,9,10,11,12,6,8,4,9,10,11,12,6,8,4,9,10,11,12,6,8,4,9,10,11,12,6,10,6,8,4,9,10,11,12,6,0,0,0,0,22,29,30,31,22,29,30,31,22,29,30,31,22,29,30,31,22,29,30,31,22,22,29,22,29,30,29,22,29,30,31,22,29,30,31,22,29,30,31,29,22,29,30,31,22,22,29,30,22,29,30,31,22,29,30,31,22,29,30,31,22,29,30,31,22,29,30,31,0,0,0,0,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,43,43,0,43,0,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,42,44,42,44,42,42,42,42,42,42,44,42,42,44,42,42,42,44,42,44,42,44,42,42,44,44,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[[[4,[2,[0,[3,2]]]],[5,[2]]],[[6,[2,[0,[3,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[7,2]]]]],[[8,[[0,[7,2]]]]]],[[[4,[[0,[7,2]],[0,[7,2]]]]],[[4,[[0,[7,2]],[0,[7,2]]]]]],[[[9,[[0,[7,2]]]]],[[9,[[0,[7,2]]]]]],[[[10,[[0,[7,2]],[0,[7,2]]]]],[[10,[[0,[7,2]],[0,[7,2]]]]]],[[[11,[[0,[7,2]]]]],[[11,[[0,[7,2]]]]]],[[[12,[[0,[7,2]]]]],[[12,[[0,[7,2]]]]]],[[[6,[[0,[7,2]],[0,[7,2]]]]],[[6,[[0,[7,2]],[0,[7,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[4,[2,[0,[3,2]]]]],[[10,[2,[0,[3,2]]]]]],[[[4,[2,[0,[3,2]]]]],[[14,[13]]]],[15,[[14,[[9,[[0,[16,2]]]]]]]],[15,[[14,[[10,[[0,[16,2]],[0,[16,2]]]]]]]],0,0,[[[8,[[0,[17,2]]]],8],18],[[[4,[[0,[17,2]],[0,[17,2]]]],4],18],[[[9,[[0,[17,2]]]],9],18],[[[10,[[0,[17,2]],[0,[17,2]]]],10],18],[[[11,[[0,[17,2]]]],11],18],[[[12,[[0,[17,2]]]],12],18],[[[8,[[0,[19,2]]]],20],21],[[[9,[[0,[19,2]]]],20],21],[[[10,[[0,[19,2]],[0,[19,2]]]],20],21],[[[6,[[0,[19,2]],[0,[19,2]]]],20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[0,[3,2]]]],[23,[[0,[3,2]]]],24,25],[[14,[[4,[2,[0,[3,2]]]],13]]]],0,0,[[[4,[2,[0,[3,2]]]],[5,[2]],26],[[14,[[5,[2]],13]]]],0,0,0,[[[9,[[0,[3,2]]]],27],14],[[[10,[[0,[3,2]],[0,[3,2]]]],27],14],0,[[[4,[2,[0,[3,2]]]]],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[[0,[7,2]]]]],[[22,[[0,[7,2]]]]]],[[[29,[[0,[7,2]]]]],[[29,[[0,[7,2]]]]]],[[[30,[[0,[7,2]]]]],[[30,[[0,[7,2]]]]]],[[[31,[[0,[7,2]]]]],[[31,[[0,[7,2]]]]]],[[]],[[]],[[]],[[]],[[[22,[[0,[2,3]]]],30,25],[[31,[[0,[2,3]]]]]],[[[22,[[0,[2,3]]]],30],[[33,[32]]]],[[[29,[[0,[2,3]]]],31,25,30],[[14,[[33,[32]],13]]]],[15,[[14,[[22,[2]]]]]],[15,[[14,[[29,[[0,[16,2]]]]]]]],[15,[[14,[[30,[[0,[16,2]]]]]]]],[[[29,[[0,[2,3]]]]],[[30,[[0,[2,3]]]]]],[[[22,[[0,[17,2]]]],22],18],[[[29,[[0,[17,2]]]],29],18],[[[30,[[0,[17,2]]]],30],18],[[[31,[[0,[17,2]]]],31],18],[[[22,[[0,[19,2]]]],20],21],[[[29,[[0,[19,2]]]],20],21],[[[30,[[0,[19,2]]]],20],21],[[[31,[[0,[19,2]]]],20],21],[[]],[[]],[[]],[[]],[22,[[29,[[0,[2,3]]]]]],[[]],[[]],[[]],[[]],[[],[[22,[[0,[2,3]]]]]],[[[22,[2]],27],14],[[[29,[[0,[3,2]]]],27],14],[[[30,[[0,[3,2]]]],27],14],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[34],[[24,34]],[[24,34,35]],0,0,0,0,[1],[[[36,[2]],[36,[2]]]],[[]],[[]],[[[36,[2]]]],[[[36,[7]]],[[36,[7]]]],[[]],[[[36,[37]]],[[36,[2]]]],[36,24],[15,[[14,[[36,[16]]]]]],[[[36,[17]],36],18],[[[36,[2]],35],[[38,[2]]]],[[[36,[19]],20],21],[[]],[33,36],[[]],[[[36,[2]],35],18],[24,[[36,[37]]]],[24,[[14,[2,13]]]],[[[36,[3]],27],14],[[]],[[],14],[[],14],[[],28],[[]],[[],[[36,[2]]]],0,[1],[[]],[[]],[25,25],[[]],[[25,25],18],[25],[[25,39],25],[[]],[[]],[39,25],[[]],[[],14],[[],14],[[],28],[[]],0,0,0,0,0,0,[24,[[14,[13]]]],[40,41],[[36,41],[[14,[13]]]],[[]],[[],[[14,[13]]]],[[],[[14,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[[42,[7]]],[[42,[7]]]],[[]],[15,[[14,[[42,[16]]]]]],[[[42,[17]],42],18],[[[42,[19]],20],21],[[]],[[]],0,[[]],[[]],[[[42,[3]],27],14],[[]],[[],14],[[],14],[[],14],[[],14],[[],28],[[],28],0,[[],[[14,[13]]]],[[]],[[]]],"p":[[3,"Private"],[8,"GroupElement"],[8,"Serialize"],[3,"Party"],[6,"SharesMap"],[3,"DkgOutput"],[8,"Clone"],[3,"PkiNode"],[3,"EncryptedShare"],[3,"FirstMessage"],[4,"Complaint"],[3,"SecondMessage"],[4,"FastCryptoError"],[4,"Result"],[8,"Deserializer"],[8,"Deserialize"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"PrivateKey"],[6,"Nodes"],[15,"u32"],[3,"RandomOracle"],[15,"usize"],[8,"Serializer"],[3,"TypeId"],[3,"PublicKey"],[3,"Encryption"],[3,"RecoveryPackage"],[15,"u8"],[3,"Vec"],[15,"u64"],[6,"ShareIndex"],[3,"Poly"],[8,"Scalar"],[6,"Eval"],[15,"str"],[6,"Share"],[6,"PartialSignature"],[3,"IndexedValue"],[8,"ThresholdBls"],[3,"ThresholdBls12381MinSig"]]},\
"fastcrypto_zkp":{"doc":"Fastcrypto-zkp is an experimental crate that offers a …","t":"AAAAAAFFGRRFFFFFFFFFFFFFFFFFFDLMLLLLLMLLLLLLLLMLLFLLLLFMLAARFFDLMLLLLLMLLLLLLLLMLLFLLLLMLDDLMMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLL","n":["bls12381","bn254","dummy_circuits","api","conversions","verifier","prepare_pvk_bytes","verify_groth16_in_bytes","BlsFr","G1_COMPRESSED_SIZE","SCALAR_SIZE","bls_fq12_to_blst_fp12","bls_fq2_to_blst_fp2","bls_fq6_to_blst_fp6","bls_fq_to_blst_fp","bls_fr_to_blst_fr","bls_g1_affine_from_zcash_bytes","bls_g1_affine_to_blst_g1_affine","bls_g1_affine_to_zcash_bytes","bls_g2_affine_from_zcash_bytes","bls_g2_affine_to_blst_g2_affine","bls_g2_affine_to_zcash_bytes","blst_fp12_to_bls_fq12","blst_fp2_to_bls_fq2","blst_fp6_to_bls_fq6","blst_fp_to_bls_fq","blst_fr_to_bls_fr","blst_g1_affine_to_bls_g1_affine","blst_g2_affine_to_bls_g2_affine","PreparedVerifyingKey","__clone_box","alpha_g1_beta_g2","as_serialized","borrow","borrow_mut","clone","clone_into","delta_g2_neg_pc","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","from","gamma_g2_neg_pc","init","into","process_vk_special","to_owned","try_from","try_into","type_id","verify_with_processed_vk","vk_gamma_abc_g1","vzip","api","verifier","SCALAR_SIZE","prepare_pvk_bytes","verify_groth16_in_bytes","PreparedVerifyingKey","__clone_box","alpha_g1_beta_g2","as_serialized","borrow","borrow_mut","clone","clone_into","delta_g2_neg_pc","deref","deref_mut","deserialize","drop","eq","equivalent","fmt","from","gamma_g2_neg_pc","init","into","process_vk_special","to_owned","try_from","try_into","type_id","vk_gamma_abc_g1","vzip","DummyCircuit","Fibonacci","__clone_box","a","b","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","generate_constraints","generate_constraints","init","init","into","into","new","num_constraints","num_variables","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["fastcrypto_zkp","","","fastcrypto_zkp::bls12381","","","fastcrypto_zkp::bls12381::api","","fastcrypto_zkp::bls12381::conversions","","","","","","","","","","","","","","","","","","","","","fastcrypto_zkp::bls12381::verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto_zkp::bn254","","fastcrypto_zkp::bn254::api","","","fastcrypto_zkp::bn254::verifier","","","","","","","","","","","","","","","","","","","","","","","","","","","fastcrypto_zkp::dummy_circuits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Groth16 verifier over the BLS12-381 elliptic curve …","Groth16 verifier over the BN254 elliptic curve …","Simple circuits used in benchmarks and demos","API that takes in serialized inputs","Conversions between arkworks &lt;-&gt; blst","Groth16 SNARK verifier","Deserialize bytes as an Arkwork representation of a …","Verify Groth16 proof using the serialized form of the four …","","G1 affine point compressed size.","Size of scalar elements.","Convert an Arkworks BLS12-381 target field element to a …","Convert an Arkworks BLS12-381 quadratic extension field …","Convert an Arkworks BLS12-381 degree-6 extension field …","Convert an Arkworks BLS12-381 prime field element to a …","Convert an Arkworks BLS12-381 scalar field element to a …","This deserializes an Arkworks G1Affine point from a Zcash …","Convert an Arkworks BLS12-381 affine G1 point to a blst …","This serializes an Arkworks G1Affine point into a Zcash …","This deserializes an Arkworks G2Affine point from a Zcash …","Convert an Arkworks BLS12-381 affine G2 point to a blst …","This serializes an Arkworks G2Affine point into a Zcash …","Convert a blst target field element to an Arkworks …","Convert a blst quadratic extension field element to an …","Convert a blst degree-6 extension field element to an …","Convert a blst prime field element to an Arkworks …","Convert a blst scalar field element to an Arkworks …","Convert a blst affine G1 point to an Arkworks BLS12-381 …","Convert a blst affine G2 point to an Arkworks BLS12-381 …","This is a helper function to store a pre-processed version …","","The element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.","Serialize the prepared verifying key to its vectors form.","","","","","The element <code>- delta * H</code> in <code>E::G2</code>, for use in pairings.","","","Deserialize the prepared verifying key from the serialized …","","","","","Returns the argument unchanged.","The element <code>- gamma * H</code> in <code>E::G2</code>, for use in pairings.","","Calls <code>U::from(self)</code>.","Takes an input <code>ark_groth16::VerifyingKey</code> <code>vk</code> and returns a …","","","","","Returns the validity of the Groth16 proof passed as …","The element vk.gamma_abc_g1, aka the …","","API that takes in serialized inputs","Groth16 SNARK verifier","Size of scalars in the BN254 construction.","Deserialize bytes as an Arkwork representation of a …","Verify Groth16 proof using the serialized form of the …","This is a helper function to store a pre-processed version …","","The element <code>e(alpha * G, beta * H)</code> in <code>E::GT</code>.","Serialize the prepared verifying key to its vectors form.","","","","","The element <code>- delta * H</code> in <code>E::G2</code>, for use in pairings.","","","Deserialize the prepared verifying key from the serialized …","","","","","Returns the argument unchanged.","The element <code>- gamma * H</code> in <code>E::G2</code>, for use in pairings.","","Calls <code>U::from(self)</code>.","Takes an input <code>ark_groth16::VerifyingKey</code> <code>vk</code> and returns a …","","","","","The element vk.gamma_abc_g1, aka the …","","A dummy circuit that checks an addition constraint between …","A circuit that checks a parametrized number of R1CS …","","the first input to the circuit","the second input to the circuit","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new instance of the Fibonacci circuit. We have to …","the number of constraints to the circuit","The number of variables to the circuit","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,22,22,22,22,0,22,22,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,30,30,30,30,30,30,0,0,33,33,33,33,35,33,35,33,33,33,35,33,35,33,35,33,35,33,35,33,35,33,35,33,35,35,33,33,33,33,35,33,35,33,35,33,35],"f":[0,0,0,0,0,0,[[],[[4,[[2,[[2,[1]]]],3]]]],[[],[[4,[5,3]]]],0,0,0,[6,7],[8,9],[10,11],[12,13],[14,15],[[],[[17,[16]]]],[16,18],[16],[[],[[17,[19]]]],[19,20],[19],[7,6],[9,8],[11,10],[13,12],[15,14],[18,16],[20,19],0,[21],0,[22,[[4,[[2,[[2,[1]]]],3]]]],[[]],[[]],[22,22],[[]],0,[23],[23],[[],[[4,[22,3]]]],[23],[[22,22],5],[[],5],[[22,24],25],[[]],0,[[],23],[[]],[26,22],[[]],[[],4],[[],4],[[],27],[[22,28],[[4,[5,29]]]],0,[[]],0,0,0,[[],[[4,[[2,[[2,[1]]]],3]]]],[[],[[4,[5,3]]]],0,[21],0,[30,[[4,[[2,[[2,[1]]]],3]]]],[[]],[[]],[30,30],[[]],0,[23],[23],[[],[[4,[30,3]]]],[23],[[30,30],5],[[],5],[[30,24],25],[[]],0,[[],23],[[]],[26,30],[[]],[[],4],[[],4],[[],27],0,[[]],0,0,[21],0,0,[[]],[[]],[[]],[[]],[[[33,[[0,[31,32]]]]],[[33,[[0,[31,32]]]]]],[[]],[23],[23],[23],[23],[23],[23],[[[33,[[0,[34,32]]]],24],25],[[[35,[[0,[34,32]]]],24],25],[[]],[[]],[[[33,[32]],[36,[32]]],[[4,[29]]]],[[[35,[32]],[36,[32]]],[[4,[29]]]],[[],23],[[],23],[[]],[[]],[[23,32,32],[[35,[32]]]],0,0,[[]],[[],4],[[],4],[[],4],[[],4],[[],27],[[],27],[[]],[[]]],"p":[[15,"u8"],[3,"Vec"],[4,"FastCryptoError"],[4,"Result"],[15,"bool"],[6,"Fq12"],[3,"blst_fp12"],[6,"Fq2"],[3,"blst_fp2"],[6,"Fq6"],[3,"blst_fp6"],[6,"Fq"],[3,"blst_fp"],[6,"BlsFr"],[3,"blst_fr"],[6,"G1Affine"],[4,"Option"],[3,"blst_p1_affine"],[6,"G2Affine"],[3,"blst_p2_affine"],[3,"Private"],[3,"PreparedVerifyingKey"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"VerifyingKey"],[3,"TypeId"],[3,"Proof"],[4,"SynthesisError"],[3,"PreparedVerifyingKey"],[8,"Clone"],[8,"PrimeField"],[3,"DummyCircuit"],[8,"Debug"],[3,"Fibonacci"],[4,"ConstraintSystemRef"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
